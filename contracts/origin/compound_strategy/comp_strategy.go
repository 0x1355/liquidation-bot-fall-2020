// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package compound_strategy

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CompoundStrategyABI is the input ABI used to generate the binding from.
const CompoundStrategyABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"setRewardTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SkippedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// CompoundStrategyBin is the compiled bytecode used for deploying new contracts.
var CompoundStrategyBin = "0x608060405262000015336200008560201b60201c565b62000025620000b460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3620000e5565b60007f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a60001b90508181555050565b6000807f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a60001b9050805491505090565b6134de80620000f56000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635f515226116100b8578063ad1728cb1161007c578063ad1728cb1461064e578063c7af335214610658578063c89d5b8b1461067a578063d38bfff414610698578063d9caed12146106dc578063dbe55e561461075e57610137565b80635f515226146103d057806370d0ea4614610428578063790fcf9f146104805780639a6acf20146105ae578063aa388af6146105f257610137565b8063125f9e33116100ff578063125f9e33146102c657806328a0702514610310578063430bf08a1461031a57806347e7ef24146103645780635d36b190146103c657610137565b80630242241d1461013c5780630c340a24146101465780630ed57b3a146101905780630fc3b4c4146101f45780631072cbea14610278575b600080fd5b6101446107a8565b005b61014e610b35565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101f2600480360360408110156101a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b44565b005b6102366004803603602081101561020a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bcc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102c46004803603604081101561028e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bff565b005b6102ce610d47565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610318610d6d565b005b610322611200565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103b06004803603604081101561037a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611226565b6040518082815260200191505060405180910390f35b6103ce6114fd565b005b610412600480360360208110156103e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611593565b6040518082815260200191505060405180910390f35b61046a6004803603602081101561043e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b2565b6040518082815260200191505060405180910390f35b6105ac600480360360a081101561049657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561051357600080fd5b82018360208201111561052557600080fd5b8035906020019184602083028401116401000000008311171561054757600080fd5b90919293919293908035906020019064010000000081111561056857600080fd5b82018360208201111561057a57600080fd5b8035906020019184602083028401116401000000008311171561059c57600080fd5b90919293919293905050506115c4565b005b6105f0600480360360208110156105c457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117d3565b005b6106346004803603602081101561060857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611891565b604051808215151515815260200191505060405180910390f35b610656611929565b005b610660611a6b565b604051808215151515815260200191505060405180910390f35b610682611aa8565b6040518082815260200191505060405180910390f35b6106da600480360360208110156106ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c19565b005b610748600480360360608110156106f257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d00565b6040518082815260200191505060405180910390f35b610766612135565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616c6c6572206973206e6f7420746865205661756c7400000000000000000081525060200191505060405180910390fd5b6000603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d602081101561093b57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109f757600080fd5b505af1158015610a0b573d6000803e3d6000fd5b505050506040513d6020811015610a2157600080fd5b8101908080519060200190929190505050610aa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f52657761726420746f6b656e207472616e73666572206661696c65640000000081525060200191505060405180910390fd5b7f9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e52058603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000610b3f61215b565b905090565b610b4c611a6b565b610bbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000081525060200191505060405180910390fd5b610bc8828261218c565b5050565b60356020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c07611a6b565b610c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610c9d610b35565b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d0757600080fd5b505af1158015610d1b573d6000803e3d6000fd5b505050506040513d6020811015610d3157600080fd5b8101908080519060200190929190505050505050565b603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610dfb5750610dcc610b35565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806133a86023913960400191505060405180910390fd5b60008090505b6036805490508110156111fd576000610ea560368381548110610e7557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124d5565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d6020811015610f5057600080fd5b810190808051906020019092919050505011156111ef578073ffffffffffffffffffffffffffffffffffffffff1663db006a758273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561100057600080fd5b505afa158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b81019080805190602001909291905050506040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b505050506040513d602081101561109b57600080fd5b8101908080519060200190929190505050506000603683815481106110bc57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506111ed603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561118c57600080fd5b505afa1580156111a0573d6000803e3d6000fd5b505050506040513d60208110156111b657600080fd5b81019080805190602001909291905050508373ffffffffffffffffffffffffffffffffffffffff166125e69092919063ffffffff16565b505b508080600101915050610e56565b50565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616c6c6572206973206e6f7420746865205661756c7400000000000000000081525060200191505060405180910390fd5b60008211611361576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d757374206465706f73697420736f6d657468696e670000000000000000000081525060200191505060405180910390fd5b600061136c846124d5565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a0712d68856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b505050506040513d60208110156113ed57600080fd5b810190808051906020019092919050505014611471576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f63546f6b656e206d696e74206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b8291508373ffffffffffffffffffffffffffffffffffffffff167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628284604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a25092915050565b6115056126b7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603081526020018061347a6030913960400191505060405180910390fd5b611591336126e8565b565b60008061159f836124d5565b90506115aa816127f8565b915050919050565b60006115bd82612970565b9050919050565b6115cc611a6b565b61163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000081525060200191505060405180910390fd5b600060019054906101000a900460ff168061165d575061165c612a1c565b5b8061167457506000809054906101000a900460ff16155b6116c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001806133ec602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611719576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6117a8888888888880806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612a33565b80156117c95760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b6117db611a6b565b61184d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000081525060200191505060405180910390fd5b80603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16603560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000603680549050905060008090505b81811015611a675760006036828154811061195057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000603560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611a0d8160008473ffffffffffffffffffffffffffffffffffffffff16612bc69092919063ffffffff16565b611a58817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8473ffffffffffffffffffffffffffffffffffffffff16612bc69092919063ffffffff16565b50508080600101915050611939565b5050565b6000611a7561215b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000806000905060008090505b603680549050811015611b21576000611b0460368381548110611ad457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124d5565b9050611b0f816127f8565b83019250508080600101915050611ab5565b506000811415611b35576000915050611c16565b600080905060008090505b603680549050811015611c0f576000611b8f60368381548110611b5f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124d5565b9050611bfd84611bef611bd860368681548110611ba857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612970565b611be1856127f8565b612de690919063ffffffff16565b612e6c90919063ffffffff16565b83019250508080600101915050611b40565b5080925050505b90565b611c21611a6b565b611c93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f43616c6c6572206973206e6f742074686520476f7665726e6f7200000000000081525060200191505060405180910390fd5b611c9c81612eb6565b8073ffffffffffffffffffffffffffffffffffffffff16611cbb61215b565b73ffffffffffffffffffffffffffffffffffffffff167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616c6c6572206973206e6f7420746865205661756c7400000000000000000081525060200191505060405180910390fd5b60008211611e3b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4d75737420776974686472617720736f6d657468696e6700000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611ede576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d757374207370656369667920726563697069656e740000000000000000000081525060200191505060405180910390fd5b6000611ee9846124d5565b90506000611ef78285612ee5565b90506000811415611f78577f2ca0d37ecfc1b8853f4bc276c69586250b3978c1d467c05d6c143966026724ec8585604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160009250505061212e565b83925060008273ffffffffffffffffffffffffffffffffffffffff1663852a12e3866040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611fd057600080fd5b505af1158015611fe4573d6000803e3d6000fd5b505050506040513d6020811015611ffa57600080fd5b81019080805190602001909291905050501461207e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f52656465656d206661696c65640000000000000000000000000000000000000081525060200191505060405180910390fd5b6120a986848773ffffffffffffffffffffffffffffffffffffffff166125e69092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63988385604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a250505b9392505050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000807f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a60001b9050805491505090565b600073ffffffffffffffffffffffffffffffffffffffff16603560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461228d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70546f6b656e20616c726561647920736574000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156122f75750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b612369576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c69642061646472657373657300000000000000000000000000000081525060200191505060405180910390fd5b80603560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060368290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508173ffffffffffffffffffffffffffffffffffffffff167fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e76582604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a26124d18282612fa1565b5050565b600080603560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f63546f6b656e20646f6573206e6f74206578697374000000000000000000000081525060200191505060405180910390fd5b80915050919050565b6126b2838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061301c565b505050565b6000807f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db60001b9050805491505090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561278b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e657720476f7665726e6f72206973206164647265737328302900000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166127aa61215b565b73ffffffffffffffffffffffffffffffffffffffff167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a36127f581613267565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561287857600080fd5b505afa15801561288c573d6000803e3d6000fd5b505050506040513d60208110156128a257600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156128fd57600080fd5b505afa158015612911573d6000803e3d6000fd5b505050506040513d602081101561292757600080fd5b81019080805190602001909291905050509050612967670de0b6b3a76400006129598385612de690919063ffffffff16565b612e6c90919063ffffffff16565b92505050919050565b60008061297c836124d5565b9050612a14622433948273ffffffffffffffffffffffffffffffffffffffff1663ae9d70b06040518163ffffffff1660e01b815260040160206040518083038186803b1580156129cb57600080fd5b505afa1580156129df573d6000803e3d6000fd5b505050506040513d60208110156129f557600080fd5b8101908080519060200190929190505050612de690919063ffffffff16565b915050919050565b6000803090506000813b9050600081149250505090565b84603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008251905081518114612b72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420696e7075742061727261797300000000000000000000000081525060200191505060405180910390fd5b60008090505b81811015612bbd57612bb0848281518110612b8f57fe5b6020026020010151848381518110612ba357fe5b602002602001015161218c565b8080600101915050612b78565b50505050505050565b6000811480612cc0575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612c8357600080fd5b505afa158015612c97573d6000803e3d6000fd5b505050506040513d6020811015612cad57600080fd5b8101908080519060200190929190505050145b612d15576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806134446036913960400191505060405180910390fd5b612de1838473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3905060e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061301c565b505050565b600080831415612df95760009050612e66565b6000828402905082848281612e0a57fe5b0414612e61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806133cb6021913960400191505060405180910390fd5b809150505b92915050565b6000612eae83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613296565b905092915050565b60007f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db60001b90508181555050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2e57600080fd5b505afa158015612f42573d6000803e3d6000fd5b505050506040513d6020811015612f5857600080fd5b81019080805190602001909291905050509050612f9881612f8a670de0b6b3a764000086612de690919063ffffffff16565b612e6c90919063ffffffff16565b91505092915050565b612fcd8160008473ffffffffffffffffffffffffffffffffffffffff16612bc69092919063ffffffff16565b613018817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8473ffffffffffffffffffffffffffffffffffffffff16612bc69092919063ffffffff16565b5050565b61303b8273ffffffffffffffffffffffffffffffffffffffff1661335c565b6130ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e74726163740081525060200191505060405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106130fc57805182526020820191506020810190506020830392506130d9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461315e576040519150601f19603f3d011682016040523d82523d6000602084013e613163565b606091505b5091509150816131db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656481525060200191505060405180910390fd5b600081511115613261578080602001905160208110156131fa57600080fd5b8101908080519060200190929190505050613260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061341a602a913960400191505060405180910390fd5b5b50505050565b60007f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a60001b90508181555050565b60008083118290613342576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156133075780820151818401526020810190506132ec565b50505050905090810190601f1680156133345780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161334e57fe5b049050809150509392505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f915080821415801561339e57506000801b8214155b9250505091905056fe43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726e6f72536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158203792758adac52e62febd68bd0608f1b99dcf2df4535fe4529bb153891d5ead5b64736f6c634300050b0032"

// DeployCompoundStrategy deploys a new Ethereum contract, binding an instance of CompoundStrategy to it.
func DeployCompoundStrategy(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CompoundStrategy, error) {
	parsed, err := abi.JSON(strings.NewReader(CompoundStrategyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CompoundStrategyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CompoundStrategy{CompoundStrategyCaller: CompoundStrategyCaller{contract: contract}, CompoundStrategyTransactor: CompoundStrategyTransactor{contract: contract}, CompoundStrategyFilterer: CompoundStrategyFilterer{contract: contract}}, nil
}

// CompoundStrategy is an auto generated Go binding around an Ethereum contract.
type CompoundStrategy struct {
	CompoundStrategyCaller     // Read-only binding to the contract
	CompoundStrategyTransactor // Write-only binding to the contract
	CompoundStrategyFilterer   // Log filterer for contract events
}

// CompoundStrategyCaller is an auto generated read-only Go binding around an Ethereum contract.
type CompoundStrategyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CompoundStrategyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CompoundStrategyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CompoundStrategyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CompoundStrategyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CompoundStrategySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CompoundStrategySession struct {
	Contract     *CompoundStrategy // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CompoundStrategyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CompoundStrategyCallerSession struct {
	Contract *CompoundStrategyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CompoundStrategyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CompoundStrategyTransactorSession struct {
	Contract     *CompoundStrategyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CompoundStrategyRaw is an auto generated low-level Go binding around an Ethereum contract.
type CompoundStrategyRaw struct {
	Contract *CompoundStrategy // Generic contract binding to access the raw methods on
}

// CompoundStrategyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CompoundStrategyCallerRaw struct {
	Contract *CompoundStrategyCaller // Generic read-only contract binding to access the raw methods on
}

// CompoundStrategyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CompoundStrategyTransactorRaw struct {
	Contract *CompoundStrategyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCompoundStrategy creates a new instance of CompoundStrategy, bound to a specific deployed contract.
func NewCompoundStrategy(address common.Address, backend bind.ContractBackend) (*CompoundStrategy, error) {
	contract, err := bindCompoundStrategy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategy{CompoundStrategyCaller: CompoundStrategyCaller{contract: contract}, CompoundStrategyTransactor: CompoundStrategyTransactor{contract: contract}, CompoundStrategyFilterer: CompoundStrategyFilterer{contract: contract}}, nil
}

// NewCompoundStrategyCaller creates a new read-only instance of CompoundStrategy, bound to a specific deployed contract.
func NewCompoundStrategyCaller(address common.Address, caller bind.ContractCaller) (*CompoundStrategyCaller, error) {
	contract, err := bindCompoundStrategy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyCaller{contract: contract}, nil
}

// NewCompoundStrategyTransactor creates a new write-only instance of CompoundStrategy, bound to a specific deployed contract.
func NewCompoundStrategyTransactor(address common.Address, transactor bind.ContractTransactor) (*CompoundStrategyTransactor, error) {
	contract, err := bindCompoundStrategy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyTransactor{contract: contract}, nil
}

// NewCompoundStrategyFilterer creates a new log filterer instance of CompoundStrategy, bound to a specific deployed contract.
func NewCompoundStrategyFilterer(address common.Address, filterer bind.ContractFilterer) (*CompoundStrategyFilterer, error) {
	contract, err := bindCompoundStrategy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyFilterer{contract: contract}, nil
}

// bindCompoundStrategy binds a generic wrapper to an already deployed contract.
func bindCompoundStrategy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CompoundStrategyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CompoundStrategy *CompoundStrategyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CompoundStrategy.Contract.CompoundStrategyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CompoundStrategy *CompoundStrategyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.CompoundStrategyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CompoundStrategy *CompoundStrategyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.CompoundStrategyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CompoundStrategy *CompoundStrategyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CompoundStrategy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CompoundStrategy *CompoundStrategyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CompoundStrategy *CompoundStrategyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.contract.Transact(opts, method, params...)
}

// AssetToPToken is a free data retrieval call binding the contract method 0x0fc3b4c4.
//
// Solidity: function assetToPToken(address ) view returns(address)
func (_CompoundStrategy *CompoundStrategyCaller) AssetToPToken(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "assetToPToken", arg0)
	return *ret0, err
}

// AssetToPToken is a free data retrieval call binding the contract method 0x0fc3b4c4.
//
// Solidity: function assetToPToken(address ) view returns(address)
func (_CompoundStrategy *CompoundStrategySession) AssetToPToken(arg0 common.Address) (common.Address, error) {
	return _CompoundStrategy.Contract.AssetToPToken(&_CompoundStrategy.CallOpts, arg0)
}

// AssetToPToken is a free data retrieval call binding the contract method 0x0fc3b4c4.
//
// Solidity: function assetToPToken(address ) view returns(address)
func (_CompoundStrategy *CompoundStrategyCallerSession) AssetToPToken(arg0 common.Address) (common.Address, error) {
	return _CompoundStrategy.Contract.AssetToPToken(&_CompoundStrategy.CallOpts, arg0)
}

// CheckBalance is a free data retrieval call binding the contract method 0x5f515226.
//
// Solidity: function checkBalance(address _asset) view returns(uint256 balance)
func (_CompoundStrategy *CompoundStrategyCaller) CheckBalance(opts *bind.CallOpts, _asset common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "checkBalance", _asset)
	return *ret0, err
}

// CheckBalance is a free data retrieval call binding the contract method 0x5f515226.
//
// Solidity: function checkBalance(address _asset) view returns(uint256 balance)
func (_CompoundStrategy *CompoundStrategySession) CheckBalance(_asset common.Address) (*big.Int, error) {
	return _CompoundStrategy.Contract.CheckBalance(&_CompoundStrategy.CallOpts, _asset)
}

// CheckBalance is a free data retrieval call binding the contract method 0x5f515226.
//
// Solidity: function checkBalance(address _asset) view returns(uint256 balance)
func (_CompoundStrategy *CompoundStrategyCallerSession) CheckBalance(_asset common.Address) (*big.Int, error) {
	return _CompoundStrategy.Contract.CheckBalance(&_CompoundStrategy.CallOpts, _asset)
}

// GetAPR is a free data retrieval call binding the contract method 0xc89d5b8b.
//
// Solidity: function getAPR() view returns(uint256)
func (_CompoundStrategy *CompoundStrategyCaller) GetAPR(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "getAPR")
	return *ret0, err
}

// GetAPR is a free data retrieval call binding the contract method 0xc89d5b8b.
//
// Solidity: function getAPR() view returns(uint256)
func (_CompoundStrategy *CompoundStrategySession) GetAPR() (*big.Int, error) {
	return _CompoundStrategy.Contract.GetAPR(&_CompoundStrategy.CallOpts)
}

// GetAPR is a free data retrieval call binding the contract method 0xc89d5b8b.
//
// Solidity: function getAPR() view returns(uint256)
func (_CompoundStrategy *CompoundStrategyCallerSession) GetAPR() (*big.Int, error) {
	return _CompoundStrategy.Contract.GetAPR(&_CompoundStrategy.CallOpts)
}

// GetAssetAPR is a free data retrieval call binding the contract method 0x70d0ea46.
//
// Solidity: function getAssetAPR(address _asset) view returns(uint256)
func (_CompoundStrategy *CompoundStrategyCaller) GetAssetAPR(opts *bind.CallOpts, _asset common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "getAssetAPR", _asset)
	return *ret0, err
}

// GetAssetAPR is a free data retrieval call binding the contract method 0x70d0ea46.
//
// Solidity: function getAssetAPR(address _asset) view returns(uint256)
func (_CompoundStrategy *CompoundStrategySession) GetAssetAPR(_asset common.Address) (*big.Int, error) {
	return _CompoundStrategy.Contract.GetAssetAPR(&_CompoundStrategy.CallOpts, _asset)
}

// GetAssetAPR is a free data retrieval call binding the contract method 0x70d0ea46.
//
// Solidity: function getAssetAPR(address _asset) view returns(uint256)
func (_CompoundStrategy *CompoundStrategyCallerSession) GetAssetAPR(_asset common.Address) (*big.Int, error) {
	return _CompoundStrategy.Contract.GetAssetAPR(&_CompoundStrategy.CallOpts, _asset)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_CompoundStrategy *CompoundStrategyCaller) Governor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "governor")
	return *ret0, err
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_CompoundStrategy *CompoundStrategySession) Governor() (common.Address, error) {
	return _CompoundStrategy.Contract.Governor(&_CompoundStrategy.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_CompoundStrategy *CompoundStrategyCallerSession) Governor() (common.Address, error) {
	return _CompoundStrategy.Contract.Governor(&_CompoundStrategy.CallOpts)
}

// IsGovernor is a free data retrieval call binding the contract method 0xc7af3352.
//
// Solidity: function isGovernor() view returns(bool)
func (_CompoundStrategy *CompoundStrategyCaller) IsGovernor(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "isGovernor")
	return *ret0, err
}

// IsGovernor is a free data retrieval call binding the contract method 0xc7af3352.
//
// Solidity: function isGovernor() view returns(bool)
func (_CompoundStrategy *CompoundStrategySession) IsGovernor() (bool, error) {
	return _CompoundStrategy.Contract.IsGovernor(&_CompoundStrategy.CallOpts)
}

// IsGovernor is a free data retrieval call binding the contract method 0xc7af3352.
//
// Solidity: function isGovernor() view returns(bool)
func (_CompoundStrategy *CompoundStrategyCallerSession) IsGovernor() (bool, error) {
	return _CompoundStrategy.Contract.IsGovernor(&_CompoundStrategy.CallOpts)
}

// PlatformAddress is a free data retrieval call binding the contract method 0xdbe55e56.
//
// Solidity: function platformAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategyCaller) PlatformAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "platformAddress")
	return *ret0, err
}

// PlatformAddress is a free data retrieval call binding the contract method 0xdbe55e56.
//
// Solidity: function platformAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategySession) PlatformAddress() (common.Address, error) {
	return _CompoundStrategy.Contract.PlatformAddress(&_CompoundStrategy.CallOpts)
}

// PlatformAddress is a free data retrieval call binding the contract method 0xdbe55e56.
//
// Solidity: function platformAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategyCallerSession) PlatformAddress() (common.Address, error) {
	return _CompoundStrategy.Contract.PlatformAddress(&_CompoundStrategy.CallOpts)
}

// RewardTokenAddress is a free data retrieval call binding the contract method 0x125f9e33.
//
// Solidity: function rewardTokenAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategyCaller) RewardTokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "rewardTokenAddress")
	return *ret0, err
}

// RewardTokenAddress is a free data retrieval call binding the contract method 0x125f9e33.
//
// Solidity: function rewardTokenAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategySession) RewardTokenAddress() (common.Address, error) {
	return _CompoundStrategy.Contract.RewardTokenAddress(&_CompoundStrategy.CallOpts)
}

// RewardTokenAddress is a free data retrieval call binding the contract method 0x125f9e33.
//
// Solidity: function rewardTokenAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategyCallerSession) RewardTokenAddress() (common.Address, error) {
	return _CompoundStrategy.Contract.RewardTokenAddress(&_CompoundStrategy.CallOpts)
}

// SupportsAsset is a free data retrieval call binding the contract method 0xaa388af6.
//
// Solidity: function supportsAsset(address _asset) view returns(bool)
func (_CompoundStrategy *CompoundStrategyCaller) SupportsAsset(opts *bind.CallOpts, _asset common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "supportsAsset", _asset)
	return *ret0, err
}

// SupportsAsset is a free data retrieval call binding the contract method 0xaa388af6.
//
// Solidity: function supportsAsset(address _asset) view returns(bool)
func (_CompoundStrategy *CompoundStrategySession) SupportsAsset(_asset common.Address) (bool, error) {
	return _CompoundStrategy.Contract.SupportsAsset(&_CompoundStrategy.CallOpts, _asset)
}

// SupportsAsset is a free data retrieval call binding the contract method 0xaa388af6.
//
// Solidity: function supportsAsset(address _asset) view returns(bool)
func (_CompoundStrategy *CompoundStrategyCallerSession) SupportsAsset(_asset common.Address) (bool, error) {
	return _CompoundStrategy.Contract.SupportsAsset(&_CompoundStrategy.CallOpts, _asset)
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategyCaller) VaultAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CompoundStrategy.contract.Call(opts, out, "vaultAddress")
	return *ret0, err
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategySession) VaultAddress() (common.Address, error) {
	return _CompoundStrategy.Contract.VaultAddress(&_CompoundStrategy.CallOpts)
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_CompoundStrategy *CompoundStrategyCallerSession) VaultAddress() (common.Address, error) {
	return _CompoundStrategy.Contract.VaultAddress(&_CompoundStrategy.CallOpts)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_CompoundStrategy *CompoundStrategyTransactor) ClaimGovernance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "claimGovernance")
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_CompoundStrategy *CompoundStrategySession) ClaimGovernance() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.ClaimGovernance(&_CompoundStrategy.TransactOpts)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) ClaimGovernance() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.ClaimGovernance(&_CompoundStrategy.TransactOpts)
}

// CollectRewardToken is a paid mutator transaction binding the contract method 0x0242241d.
//
// Solidity: function collectRewardToken() returns()
func (_CompoundStrategy *CompoundStrategyTransactor) CollectRewardToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "collectRewardToken")
}

// CollectRewardToken is a paid mutator transaction binding the contract method 0x0242241d.
//
// Solidity: function collectRewardToken() returns()
func (_CompoundStrategy *CompoundStrategySession) CollectRewardToken() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.CollectRewardToken(&_CompoundStrategy.TransactOpts)
}

// CollectRewardToken is a paid mutator transaction binding the contract method 0x0242241d.
//
// Solidity: function collectRewardToken() returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) CollectRewardToken() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.CollectRewardToken(&_CompoundStrategy.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address _asset, uint256 _amount) returns(uint256 amountDeposited)
func (_CompoundStrategy *CompoundStrategyTransactor) Deposit(opts *bind.TransactOpts, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "deposit", _asset, _amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address _asset, uint256 _amount) returns(uint256 amountDeposited)
func (_CompoundStrategy *CompoundStrategySession) Deposit(_asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Deposit(&_CompoundStrategy.TransactOpts, _asset, _amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address _asset, uint256 _amount) returns(uint256 amountDeposited)
func (_CompoundStrategy *CompoundStrategyTransactorSession) Deposit(_asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Deposit(&_CompoundStrategy.TransactOpts, _asset, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x790fcf9f.
//
// Solidity: function initialize(address _platformAddress, address _vaultAddress, address _rewardTokenAddress, address[] _assets, address[] _pTokens) returns()
func (_CompoundStrategy *CompoundStrategyTransactor) Initialize(opts *bind.TransactOpts, _platformAddress common.Address, _vaultAddress common.Address, _rewardTokenAddress common.Address, _assets []common.Address, _pTokens []common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "initialize", _platformAddress, _vaultAddress, _rewardTokenAddress, _assets, _pTokens)
}

// Initialize is a paid mutator transaction binding the contract method 0x790fcf9f.
//
// Solidity: function initialize(address _platformAddress, address _vaultAddress, address _rewardTokenAddress, address[] _assets, address[] _pTokens) returns()
func (_CompoundStrategy *CompoundStrategySession) Initialize(_platformAddress common.Address, _vaultAddress common.Address, _rewardTokenAddress common.Address, _assets []common.Address, _pTokens []common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Initialize(&_CompoundStrategy.TransactOpts, _platformAddress, _vaultAddress, _rewardTokenAddress, _assets, _pTokens)
}

// Initialize is a paid mutator transaction binding the contract method 0x790fcf9f.
//
// Solidity: function initialize(address _platformAddress, address _vaultAddress, address _rewardTokenAddress, address[] _assets, address[] _pTokens) returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) Initialize(_platformAddress common.Address, _vaultAddress common.Address, _rewardTokenAddress common.Address, _assets []common.Address, _pTokens []common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Initialize(&_CompoundStrategy.TransactOpts, _platformAddress, _vaultAddress, _rewardTokenAddress, _assets, _pTokens)
}

// Liquidate is a paid mutator transaction binding the contract method 0x28a07025.
//
// Solidity: function liquidate() returns()
func (_CompoundStrategy *CompoundStrategyTransactor) Liquidate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "liquidate")
}

// Liquidate is a paid mutator transaction binding the contract method 0x28a07025.
//
// Solidity: function liquidate() returns()
func (_CompoundStrategy *CompoundStrategySession) Liquidate() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Liquidate(&_CompoundStrategy.TransactOpts)
}

// Liquidate is a paid mutator transaction binding the contract method 0x28a07025.
//
// Solidity: function liquidate() returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) Liquidate() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Liquidate(&_CompoundStrategy.TransactOpts)
}

// SafeApproveAllTokens is a paid mutator transaction binding the contract method 0xad1728cb.
//
// Solidity: function safeApproveAllTokens() returns()
func (_CompoundStrategy *CompoundStrategyTransactor) SafeApproveAllTokens(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "safeApproveAllTokens")
}

// SafeApproveAllTokens is a paid mutator transaction binding the contract method 0xad1728cb.
//
// Solidity: function safeApproveAllTokens() returns()
func (_CompoundStrategy *CompoundStrategySession) SafeApproveAllTokens() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.SafeApproveAllTokens(&_CompoundStrategy.TransactOpts)
}

// SafeApproveAllTokens is a paid mutator transaction binding the contract method 0xad1728cb.
//
// Solidity: function safeApproveAllTokens() returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) SafeApproveAllTokens() (*types.Transaction, error) {
	return _CompoundStrategy.Contract.SafeApproveAllTokens(&_CompoundStrategy.TransactOpts)
}

// SetPTokenAddress is a paid mutator transaction binding the contract method 0x0ed57b3a.
//
// Solidity: function setPTokenAddress(address _asset, address _pToken) returns()
func (_CompoundStrategy *CompoundStrategyTransactor) SetPTokenAddress(opts *bind.TransactOpts, _asset common.Address, _pToken common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "setPTokenAddress", _asset, _pToken)
}

// SetPTokenAddress is a paid mutator transaction binding the contract method 0x0ed57b3a.
//
// Solidity: function setPTokenAddress(address _asset, address _pToken) returns()
func (_CompoundStrategy *CompoundStrategySession) SetPTokenAddress(_asset common.Address, _pToken common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.SetPTokenAddress(&_CompoundStrategy.TransactOpts, _asset, _pToken)
}

// SetPTokenAddress is a paid mutator transaction binding the contract method 0x0ed57b3a.
//
// Solidity: function setPTokenAddress(address _asset, address _pToken) returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) SetPTokenAddress(_asset common.Address, _pToken common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.SetPTokenAddress(&_CompoundStrategy.TransactOpts, _asset, _pToken)
}

// SetRewardTokenAddress is a paid mutator transaction binding the contract method 0x9a6acf20.
//
// Solidity: function setRewardTokenAddress(address _rewardTokenAddress) returns()
func (_CompoundStrategy *CompoundStrategyTransactor) SetRewardTokenAddress(opts *bind.TransactOpts, _rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "setRewardTokenAddress", _rewardTokenAddress)
}

// SetRewardTokenAddress is a paid mutator transaction binding the contract method 0x9a6acf20.
//
// Solidity: function setRewardTokenAddress(address _rewardTokenAddress) returns()
func (_CompoundStrategy *CompoundStrategySession) SetRewardTokenAddress(_rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.SetRewardTokenAddress(&_CompoundStrategy.TransactOpts, _rewardTokenAddress)
}

// SetRewardTokenAddress is a paid mutator transaction binding the contract method 0x9a6acf20.
//
// Solidity: function setRewardTokenAddress(address _rewardTokenAddress) returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) SetRewardTokenAddress(_rewardTokenAddress common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.SetRewardTokenAddress(&_CompoundStrategy.TransactOpts, _rewardTokenAddress)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _newGovernor) returns()
func (_CompoundStrategy *CompoundStrategyTransactor) TransferGovernance(opts *bind.TransactOpts, _newGovernor common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "transferGovernance", _newGovernor)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _newGovernor) returns()
func (_CompoundStrategy *CompoundStrategySession) TransferGovernance(_newGovernor common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.TransferGovernance(&_CompoundStrategy.TransactOpts, _newGovernor)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _newGovernor) returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) TransferGovernance(_newGovernor common.Address) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.TransferGovernance(&_CompoundStrategy.TransactOpts, _newGovernor)
}

// TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.
//
// Solidity: function transferToken(address _asset, uint256 _amount) returns()
func (_CompoundStrategy *CompoundStrategyTransactor) TransferToken(opts *bind.TransactOpts, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "transferToken", _asset, _amount)
}

// TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.
//
// Solidity: function transferToken(address _asset, uint256 _amount) returns()
func (_CompoundStrategy *CompoundStrategySession) TransferToken(_asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.TransferToken(&_CompoundStrategy.TransactOpts, _asset, _amount)
}

// TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.
//
// Solidity: function transferToken(address _asset, uint256 _amount) returns()
func (_CompoundStrategy *CompoundStrategyTransactorSession) TransferToken(_asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.TransferToken(&_CompoundStrategy.TransactOpts, _asset, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address _recipient, address _asset, uint256 _amount) returns(uint256 amountWithdrawn)
func (_CompoundStrategy *CompoundStrategyTransactor) Withdraw(opts *bind.TransactOpts, _recipient common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.contract.Transact(opts, "withdraw", _recipient, _asset, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address _recipient, address _asset, uint256 _amount) returns(uint256 amountWithdrawn)
func (_CompoundStrategy *CompoundStrategySession) Withdraw(_recipient common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Withdraw(&_CompoundStrategy.TransactOpts, _recipient, _asset, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address _recipient, address _asset, uint256 _amount) returns(uint256 amountWithdrawn)
func (_CompoundStrategy *CompoundStrategyTransactorSession) Withdraw(_recipient common.Address, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompoundStrategy.Contract.Withdraw(&_CompoundStrategy.TransactOpts, _recipient, _asset, _amount)
}

// CompoundStrategyDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the CompoundStrategy contract.
type CompoundStrategyDepositIterator struct {
	Event *CompoundStrategyDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategyDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategyDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategyDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategyDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategyDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategyDeposit represents a Deposit event raised by the CompoundStrategy contract.
type CompoundStrategyDeposit struct {
	Asset  common.Address
	PToken common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62.
//
// Solidity: event Deposit(address indexed _asset, address _pToken, uint256 _amount)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterDeposit(opts *bind.FilterOpts, _asset []common.Address) (*CompoundStrategyDepositIterator, error) {

	var _assetRule []interface{}
	for _, _assetItem := range _asset {
		_assetRule = append(_assetRule, _assetItem)
	}

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "Deposit", _assetRule)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyDepositIterator{contract: _CompoundStrategy.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62.
//
// Solidity: event Deposit(address indexed _asset, address _pToken, uint256 _amount)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *CompoundStrategyDeposit, _asset []common.Address) (event.Subscription, error) {

	var _assetRule []interface{}
	for _, _assetItem := range _asset {
		_assetRule = append(_assetRule, _assetItem)
	}

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "Deposit", _assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategyDeposit)
				if err := _CompoundStrategy.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62.
//
// Solidity: event Deposit(address indexed _asset, address _pToken, uint256 _amount)
func (_CompoundStrategy *CompoundStrategyFilterer) ParseDeposit(log types.Log) (*CompoundStrategyDeposit, error) {
	event := new(CompoundStrategyDeposit)
	if err := _CompoundStrategy.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CompoundStrategyGovernorshipTransferredIterator is returned from FilterGovernorshipTransferred and is used to iterate over the raw logs and unpacked data for GovernorshipTransferred events raised by the CompoundStrategy contract.
type CompoundStrategyGovernorshipTransferredIterator struct {
	Event *CompoundStrategyGovernorshipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategyGovernorshipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategyGovernorshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategyGovernorshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategyGovernorshipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategyGovernorshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategyGovernorshipTransferred represents a GovernorshipTransferred event raised by the CompoundStrategy contract.
type CompoundStrategyGovernorshipTransferred struct {
	PreviousGovernor common.Address
	NewGovernor      common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterGovernorshipTransferred is a free log retrieval operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterGovernorshipTransferred(opts *bind.FilterOpts, previousGovernor []common.Address, newGovernor []common.Address) (*CompoundStrategyGovernorshipTransferredIterator, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "GovernorshipTransferred", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyGovernorshipTransferredIterator{contract: _CompoundStrategy.contract, event: "GovernorshipTransferred", logs: logs, sub: sub}, nil
}

// WatchGovernorshipTransferred is a free log subscription operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchGovernorshipTransferred(opts *bind.WatchOpts, sink chan<- *CompoundStrategyGovernorshipTransferred, previousGovernor []common.Address, newGovernor []common.Address) (event.Subscription, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "GovernorshipTransferred", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategyGovernorshipTransferred)
				if err := _CompoundStrategy.contract.UnpackLog(event, "GovernorshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernorshipTransferred is a log parse operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_CompoundStrategy *CompoundStrategyFilterer) ParseGovernorshipTransferred(log types.Log) (*CompoundStrategyGovernorshipTransferred, error) {
	event := new(CompoundStrategyGovernorshipTransferred)
	if err := _CompoundStrategy.contract.UnpackLog(event, "GovernorshipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CompoundStrategyPTokenAddedIterator is returned from FilterPTokenAdded and is used to iterate over the raw logs and unpacked data for PTokenAdded events raised by the CompoundStrategy contract.
type CompoundStrategyPTokenAddedIterator struct {
	Event *CompoundStrategyPTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategyPTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategyPTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategyPTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategyPTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategyPTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategyPTokenAdded represents a PTokenAdded event raised by the CompoundStrategy contract.
type CompoundStrategyPTokenAdded struct {
	Asset  common.Address
	PToken common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPTokenAdded is a free log retrieval operation binding the contract event 0xef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765.
//
// Solidity: event PTokenAdded(address indexed _asset, address _pToken)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterPTokenAdded(opts *bind.FilterOpts, _asset []common.Address) (*CompoundStrategyPTokenAddedIterator, error) {

	var _assetRule []interface{}
	for _, _assetItem := range _asset {
		_assetRule = append(_assetRule, _assetItem)
	}

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "PTokenAdded", _assetRule)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyPTokenAddedIterator{contract: _CompoundStrategy.contract, event: "PTokenAdded", logs: logs, sub: sub}, nil
}

// WatchPTokenAdded is a free log subscription operation binding the contract event 0xef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765.
//
// Solidity: event PTokenAdded(address indexed _asset, address _pToken)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchPTokenAdded(opts *bind.WatchOpts, sink chan<- *CompoundStrategyPTokenAdded, _asset []common.Address) (event.Subscription, error) {

	var _assetRule []interface{}
	for _, _assetItem := range _asset {
		_assetRule = append(_assetRule, _assetItem)
	}

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "PTokenAdded", _assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategyPTokenAdded)
				if err := _CompoundStrategy.contract.UnpackLog(event, "PTokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePTokenAdded is a log parse operation binding the contract event 0xef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765.
//
// Solidity: event PTokenAdded(address indexed _asset, address _pToken)
func (_CompoundStrategy *CompoundStrategyFilterer) ParsePTokenAdded(log types.Log) (*CompoundStrategyPTokenAdded, error) {
	event := new(CompoundStrategyPTokenAdded)
	if err := _CompoundStrategy.contract.UnpackLog(event, "PTokenAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CompoundStrategyPendingGovernorshipTransferIterator is returned from FilterPendingGovernorshipTransfer and is used to iterate over the raw logs and unpacked data for PendingGovernorshipTransfer events raised by the CompoundStrategy contract.
type CompoundStrategyPendingGovernorshipTransferIterator struct {
	Event *CompoundStrategyPendingGovernorshipTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategyPendingGovernorshipTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategyPendingGovernorshipTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategyPendingGovernorshipTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategyPendingGovernorshipTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategyPendingGovernorshipTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategyPendingGovernorshipTransfer represents a PendingGovernorshipTransfer event raised by the CompoundStrategy contract.
type CompoundStrategyPendingGovernorshipTransfer struct {
	PreviousGovernor common.Address
	NewGovernor      common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterPendingGovernorshipTransfer is a free log retrieval operation binding the contract event 0xa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d.
//
// Solidity: event PendingGovernorshipTransfer(address indexed previousGovernor, address indexed newGovernor)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterPendingGovernorshipTransfer(opts *bind.FilterOpts, previousGovernor []common.Address, newGovernor []common.Address) (*CompoundStrategyPendingGovernorshipTransferIterator, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "PendingGovernorshipTransfer", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyPendingGovernorshipTransferIterator{contract: _CompoundStrategy.contract, event: "PendingGovernorshipTransfer", logs: logs, sub: sub}, nil
}

// WatchPendingGovernorshipTransfer is a free log subscription operation binding the contract event 0xa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d.
//
// Solidity: event PendingGovernorshipTransfer(address indexed previousGovernor, address indexed newGovernor)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchPendingGovernorshipTransfer(opts *bind.WatchOpts, sink chan<- *CompoundStrategyPendingGovernorshipTransfer, previousGovernor []common.Address, newGovernor []common.Address) (event.Subscription, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "PendingGovernorshipTransfer", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategyPendingGovernorshipTransfer)
				if err := _CompoundStrategy.contract.UnpackLog(event, "PendingGovernorshipTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePendingGovernorshipTransfer is a log parse operation binding the contract event 0xa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d.
//
// Solidity: event PendingGovernorshipTransfer(address indexed previousGovernor, address indexed newGovernor)
func (_CompoundStrategy *CompoundStrategyFilterer) ParsePendingGovernorshipTransfer(log types.Log) (*CompoundStrategyPendingGovernorshipTransfer, error) {
	event := new(CompoundStrategyPendingGovernorshipTransfer)
	if err := _CompoundStrategy.contract.UnpackLog(event, "PendingGovernorshipTransfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CompoundStrategyRewardTokenCollectedIterator is returned from FilterRewardTokenCollected and is used to iterate over the raw logs and unpacked data for RewardTokenCollected events raised by the CompoundStrategy contract.
type CompoundStrategyRewardTokenCollectedIterator struct {
	Event *CompoundStrategyRewardTokenCollected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategyRewardTokenCollectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategyRewardTokenCollected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategyRewardTokenCollected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategyRewardTokenCollectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategyRewardTokenCollectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategyRewardTokenCollected represents a RewardTokenCollected event raised by the CompoundStrategy contract.
type CompoundStrategyRewardTokenCollected struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewardTokenCollected is a free log retrieval operation binding the contract event 0x9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e52058.
//
// Solidity: event RewardTokenCollected(address recipient, uint256 amount)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterRewardTokenCollected(opts *bind.FilterOpts) (*CompoundStrategyRewardTokenCollectedIterator, error) {

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "RewardTokenCollected")
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyRewardTokenCollectedIterator{contract: _CompoundStrategy.contract, event: "RewardTokenCollected", logs: logs, sub: sub}, nil
}

// WatchRewardTokenCollected is a free log subscription operation binding the contract event 0x9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e52058.
//
// Solidity: event RewardTokenCollected(address recipient, uint256 amount)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchRewardTokenCollected(opts *bind.WatchOpts, sink chan<- *CompoundStrategyRewardTokenCollected) (event.Subscription, error) {

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "RewardTokenCollected")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategyRewardTokenCollected)
				if err := _CompoundStrategy.contract.UnpackLog(event, "RewardTokenCollected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardTokenCollected is a log parse operation binding the contract event 0x9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e52058.
//
// Solidity: event RewardTokenCollected(address recipient, uint256 amount)
func (_CompoundStrategy *CompoundStrategyFilterer) ParseRewardTokenCollected(log types.Log) (*CompoundStrategyRewardTokenCollected, error) {
	event := new(CompoundStrategyRewardTokenCollected)
	if err := _CompoundStrategy.contract.UnpackLog(event, "RewardTokenCollected", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CompoundStrategySkippedWithdrawalIterator is returned from FilterSkippedWithdrawal and is used to iterate over the raw logs and unpacked data for SkippedWithdrawal events raised by the CompoundStrategy contract.
type CompoundStrategySkippedWithdrawalIterator struct {
	Event *CompoundStrategySkippedWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategySkippedWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategySkippedWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategySkippedWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategySkippedWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategySkippedWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategySkippedWithdrawal represents a SkippedWithdrawal event raised by the CompoundStrategy contract.
type CompoundStrategySkippedWithdrawal struct {
	Asset  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSkippedWithdrawal is a free log retrieval operation binding the contract event 0x2ca0d37ecfc1b8853f4bc276c69586250b3978c1d467c05d6c143966026724ec.
//
// Solidity: event SkippedWithdrawal(address asset, uint256 amount)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterSkippedWithdrawal(opts *bind.FilterOpts) (*CompoundStrategySkippedWithdrawalIterator, error) {

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "SkippedWithdrawal")
	if err != nil {
		return nil, err
	}
	return &CompoundStrategySkippedWithdrawalIterator{contract: _CompoundStrategy.contract, event: "SkippedWithdrawal", logs: logs, sub: sub}, nil
}

// WatchSkippedWithdrawal is a free log subscription operation binding the contract event 0x2ca0d37ecfc1b8853f4bc276c69586250b3978c1d467c05d6c143966026724ec.
//
// Solidity: event SkippedWithdrawal(address asset, uint256 amount)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchSkippedWithdrawal(opts *bind.WatchOpts, sink chan<- *CompoundStrategySkippedWithdrawal) (event.Subscription, error) {

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "SkippedWithdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategySkippedWithdrawal)
				if err := _CompoundStrategy.contract.UnpackLog(event, "SkippedWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSkippedWithdrawal is a log parse operation binding the contract event 0x2ca0d37ecfc1b8853f4bc276c69586250b3978c1d467c05d6c143966026724ec.
//
// Solidity: event SkippedWithdrawal(address asset, uint256 amount)
func (_CompoundStrategy *CompoundStrategyFilterer) ParseSkippedWithdrawal(log types.Log) (*CompoundStrategySkippedWithdrawal, error) {
	event := new(CompoundStrategySkippedWithdrawal)
	if err := _CompoundStrategy.contract.UnpackLog(event, "SkippedWithdrawal", log); err != nil {
		return nil, err
	}
	return event, nil
}

// CompoundStrategyWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the CompoundStrategy contract.
type CompoundStrategyWithdrawalIterator struct {
	Event *CompoundStrategyWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CompoundStrategyWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CompoundStrategyWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CompoundStrategyWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CompoundStrategyWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CompoundStrategyWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CompoundStrategyWithdrawal represents a Withdrawal event raised by the CompoundStrategy contract.
type CompoundStrategyWithdrawal struct {
	Asset  common.Address
	PToken common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398.
//
// Solidity: event Withdrawal(address indexed _asset, address _pToken, uint256 _amount)
func (_CompoundStrategy *CompoundStrategyFilterer) FilterWithdrawal(opts *bind.FilterOpts, _asset []common.Address) (*CompoundStrategyWithdrawalIterator, error) {

	var _assetRule []interface{}
	for _, _assetItem := range _asset {
		_assetRule = append(_assetRule, _assetItem)
	}

	logs, sub, err := _CompoundStrategy.contract.FilterLogs(opts, "Withdrawal", _assetRule)
	if err != nil {
		return nil, err
	}
	return &CompoundStrategyWithdrawalIterator{contract: _CompoundStrategy.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0x2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398.
//
// Solidity: event Withdrawal(address indexed _asset, address _pToken, uint256 _amount)
func (_CompoundStrategy *CompoundStrategyFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *CompoundStrategyWithdrawal, _asset []common.Address) (event.Subscription, error) {

	var _assetRule []interface{}
	for _, _assetItem := range _asset {
		_assetRule = append(_assetRule, _assetItem)
	}

	logs, sub, err := _CompoundStrategy.contract.WatchLogs(opts, "Withdrawal", _assetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CompoundStrategyWithdrawal)
				if err := _CompoundStrategy.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0x2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398.
//
// Solidity: event Withdrawal(address indexed _asset, address _pToken, uint256 _amount)
func (_CompoundStrategy *CompoundStrategyFilterer) ParseWithdrawal(log types.Log) (*CompoundStrategyWithdrawal, error) {
	event := new(CompoundStrategyWithdrawal)
	if err := _CompoundStrategy.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	return event, nil
}
