// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package origin_vault

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OriginVaultABI is the input ABI used to generate the binding from.
const OriginVaultABI = "[{\"constant\":false,\"inputs\":[],\"name\":\"pauseDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseRebase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRebaseHooksAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"priceUSDRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ousd\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_strategyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"setStrategyWeights\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"priceUSDMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseHooksAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"setVaultBuffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUniswapAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setAutoAllocateThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRebaseThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseRebase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetWeight\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"setRedeemFeeBps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_strategyAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"StrategyWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}]"

// OriginVaultBin is the compiled bytecode used for deploying new contracts.
var OriginVaultBin = ""

// DeployOriginVault deploys a new Ethereum contract, binding an instance of OriginVault to it.
func DeployOriginVault(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OriginVault, error) {
	parsed, err := abi.JSON(strings.NewReader(OriginVaultABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OriginVaultBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OriginVault{OriginVaultCaller: OriginVaultCaller{contract: contract}, OriginVaultTransactor: OriginVaultTransactor{contract: contract}, OriginVaultFilterer: OriginVaultFilterer{contract: contract}}, nil
}

// OriginVault is an auto generated Go binding around an Ethereum contract.
type OriginVault struct {
	OriginVaultCaller     // Read-only binding to the contract
	OriginVaultTransactor // Write-only binding to the contract
	OriginVaultFilterer   // Log filterer for contract events
}

// OriginVaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type OriginVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OriginVaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OriginVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OriginVaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OriginVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OriginVaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OriginVaultSession struct {
	Contract     *OriginVault      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OriginVaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OriginVaultCallerSession struct {
	Contract *OriginVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// OriginVaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OriginVaultTransactorSession struct {
	Contract     *OriginVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// OriginVaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type OriginVaultRaw struct {
	Contract *OriginVault // Generic contract binding to access the raw methods on
}

// OriginVaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OriginVaultCallerRaw struct {
	Contract *OriginVaultCaller // Generic read-only contract binding to access the raw methods on
}

// OriginVaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OriginVaultTransactorRaw struct {
	Contract *OriginVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOriginVault creates a new instance of OriginVault, bound to a specific deployed contract.
func NewOriginVault(address common.Address, backend bind.ContractBackend) (*OriginVault, error) {
	contract, err := bindOriginVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OriginVault{OriginVaultCaller: OriginVaultCaller{contract: contract}, OriginVaultTransactor: OriginVaultTransactor{contract: contract}, OriginVaultFilterer: OriginVaultFilterer{contract: contract}}, nil
}

// NewOriginVaultCaller creates a new read-only instance of OriginVault, bound to a specific deployed contract.
func NewOriginVaultCaller(address common.Address, caller bind.ContractCaller) (*OriginVaultCaller, error) {
	contract, err := bindOriginVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OriginVaultCaller{contract: contract}, nil
}

// NewOriginVaultTransactor creates a new write-only instance of OriginVault, bound to a specific deployed contract.
func NewOriginVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*OriginVaultTransactor, error) {
	contract, err := bindOriginVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OriginVaultTransactor{contract: contract}, nil
}

// NewOriginVaultFilterer creates a new log filterer instance of OriginVault, bound to a specific deployed contract.
func NewOriginVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*OriginVaultFilterer, error) {
	contract, err := bindOriginVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OriginVaultFilterer{contract: contract}, nil
}

// bindOriginVault binds a generic wrapper to an already deployed contract.
func bindOriginVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OriginVaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OriginVault *OriginVaultRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OriginVault.Contract.OriginVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OriginVault *OriginVaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.Contract.OriginVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OriginVault *OriginVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OriginVault.Contract.OriginVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OriginVault *OriginVaultCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _OriginVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OriginVault *OriginVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OriginVault *OriginVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OriginVault.Contract.contract.Transact(opts, method, params...)
}

// AutoAllocateThreshold is a free data retrieval call binding the contract method 0x9fa1826e.
//
// Solidity: function autoAllocateThreshold() view returns(uint256)
func (_OriginVault *OriginVaultCaller) AutoAllocateThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "autoAllocateThreshold")
	return *ret0, err
}

// AutoAllocateThreshold is a free data retrieval call binding the contract method 0x9fa1826e.
//
// Solidity: function autoAllocateThreshold() view returns(uint256)
func (_OriginVault *OriginVaultSession) AutoAllocateThreshold() (*big.Int, error) {
	return _OriginVault.Contract.AutoAllocateThreshold(&_OriginVault.CallOpts)
}

// AutoAllocateThreshold is a free data retrieval call binding the contract method 0x9fa1826e.
//
// Solidity: function autoAllocateThreshold() view returns(uint256)
func (_OriginVault *OriginVaultCallerSession) AutoAllocateThreshold() (*big.Int, error) {
	return _OriginVault.Contract.AutoAllocateThreshold(&_OriginVault.CallOpts)
}

// DepositPaused is a free data retrieval call binding the contract method 0x02befd24.
//
// Solidity: function depositPaused() view returns(bool)
func (_OriginVault *OriginVaultCaller) DepositPaused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "depositPaused")
	return *ret0, err
}

// DepositPaused is a free data retrieval call binding the contract method 0x02befd24.
//
// Solidity: function depositPaused() view returns(bool)
func (_OriginVault *OriginVaultSession) DepositPaused() (bool, error) {
	return _OriginVault.Contract.DepositPaused(&_OriginVault.CallOpts)
}

// DepositPaused is a free data retrieval call binding the contract method 0x02befd24.
//
// Solidity: function depositPaused() view returns(bool)
func (_OriginVault *OriginVaultCallerSession) DepositPaused() (bool, error) {
	return _OriginVault.Contract.DepositPaused(&_OriginVault.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_OriginVault *OriginVaultCaller) Governor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "governor")
	return *ret0, err
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_OriginVault *OriginVaultSession) Governor() (common.Address, error) {
	return _OriginVault.Contract.Governor(&_OriginVault.CallOpts)
}

// Governor is a free data retrieval call binding the contract method 0x0c340a24.
//
// Solidity: function governor() view returns(address)
func (_OriginVault *OriginVaultCallerSession) Governor() (common.Address, error) {
	return _OriginVault.Contract.Governor(&_OriginVault.CallOpts)
}

// IsGovernor is a free data retrieval call binding the contract method 0xc7af3352.
//
// Solidity: function isGovernor() view returns(bool)
func (_OriginVault *OriginVaultCaller) IsGovernor(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "isGovernor")
	return *ret0, err
}

// IsGovernor is a free data retrieval call binding the contract method 0xc7af3352.
//
// Solidity: function isGovernor() view returns(bool)
func (_OriginVault *OriginVaultSession) IsGovernor() (bool, error) {
	return _OriginVault.Contract.IsGovernor(&_OriginVault.CallOpts)
}

// IsGovernor is a free data retrieval call binding the contract method 0xc7af3352.
//
// Solidity: function isGovernor() view returns(bool)
func (_OriginVault *OriginVaultCallerSession) IsGovernor() (bool, error) {
	return _OriginVault.Contract.IsGovernor(&_OriginVault.CallOpts)
}

// PriceProvider is a free data retrieval call binding the contract method 0xb888879e.
//
// Solidity: function priceProvider() view returns(address)
func (_OriginVault *OriginVaultCaller) PriceProvider(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "priceProvider")
	return *ret0, err
}

// PriceProvider is a free data retrieval call binding the contract method 0xb888879e.
//
// Solidity: function priceProvider() view returns(address)
func (_OriginVault *OriginVaultSession) PriceProvider() (common.Address, error) {
	return _OriginVault.Contract.PriceProvider(&_OriginVault.CallOpts)
}

// PriceProvider is a free data retrieval call binding the contract method 0xb888879e.
//
// Solidity: function priceProvider() view returns(address)
func (_OriginVault *OriginVaultCallerSession) PriceProvider() (common.Address, error) {
	return _OriginVault.Contract.PriceProvider(&_OriginVault.CallOpts)
}

// RebaseHooksAddr is a free data retrieval call binding the contract method 0x796be57b.
//
// Solidity: function rebaseHooksAddr() view returns(address)
func (_OriginVault *OriginVaultCaller) RebaseHooksAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "rebaseHooksAddr")
	return *ret0, err
}

// RebaseHooksAddr is a free data retrieval call binding the contract method 0x796be57b.
//
// Solidity: function rebaseHooksAddr() view returns(address)
func (_OriginVault *OriginVaultSession) RebaseHooksAddr() (common.Address, error) {
	return _OriginVault.Contract.RebaseHooksAddr(&_OriginVault.CallOpts)
}

// RebaseHooksAddr is a free data retrieval call binding the contract method 0x796be57b.
//
// Solidity: function rebaseHooksAddr() view returns(address)
func (_OriginVault *OriginVaultCallerSession) RebaseHooksAddr() (common.Address, error) {
	return _OriginVault.Contract.RebaseHooksAddr(&_OriginVault.CallOpts)
}

// RebasePaused is a free data retrieval call binding the contract method 0x53ca9f24.
//
// Solidity: function rebasePaused() view returns(bool)
func (_OriginVault *OriginVaultCaller) RebasePaused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "rebasePaused")
	return *ret0, err
}

// RebasePaused is a free data retrieval call binding the contract method 0x53ca9f24.
//
// Solidity: function rebasePaused() view returns(bool)
func (_OriginVault *OriginVaultSession) RebasePaused() (bool, error) {
	return _OriginVault.Contract.RebasePaused(&_OriginVault.CallOpts)
}

// RebasePaused is a free data retrieval call binding the contract method 0x53ca9f24.
//
// Solidity: function rebasePaused() view returns(bool)
func (_OriginVault *OriginVaultCallerSession) RebasePaused() (bool, error) {
	return _OriginVault.Contract.RebasePaused(&_OriginVault.CallOpts)
}

// RebaseThreshold is a free data retrieval call binding the contract method 0x52d38e5d.
//
// Solidity: function rebaseThreshold() view returns(uint256)
func (_OriginVault *OriginVaultCaller) RebaseThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "rebaseThreshold")
	return *ret0, err
}

// RebaseThreshold is a free data retrieval call binding the contract method 0x52d38e5d.
//
// Solidity: function rebaseThreshold() view returns(uint256)
func (_OriginVault *OriginVaultSession) RebaseThreshold() (*big.Int, error) {
	return _OriginVault.Contract.RebaseThreshold(&_OriginVault.CallOpts)
}

// RebaseThreshold is a free data retrieval call binding the contract method 0x52d38e5d.
//
// Solidity: function rebaseThreshold() view returns(uint256)
func (_OriginVault *OriginVaultCallerSession) RebaseThreshold() (*big.Int, error) {
	return _OriginVault.Contract.RebaseThreshold(&_OriginVault.CallOpts)
}

// RedeemFeeBps is a free data retrieval call binding the contract method 0x09f6442c.
//
// Solidity: function redeemFeeBps() view returns(uint256)
func (_OriginVault *OriginVaultCaller) RedeemFeeBps(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "redeemFeeBps")
	return *ret0, err
}

// RedeemFeeBps is a free data retrieval call binding the contract method 0x09f6442c.
//
// Solidity: function redeemFeeBps() view returns(uint256)
func (_OriginVault *OriginVaultSession) RedeemFeeBps() (*big.Int, error) {
	return _OriginVault.Contract.RedeemFeeBps(&_OriginVault.CallOpts)
}

// RedeemFeeBps is a free data retrieval call binding the contract method 0x09f6442c.
//
// Solidity: function redeemFeeBps() view returns(uint256)
func (_OriginVault *OriginVaultCallerSession) RedeemFeeBps() (*big.Int, error) {
	return _OriginVault.Contract.RedeemFeeBps(&_OriginVault.CallOpts)
}

// UniswapAddr is a free data retrieval call binding the contract method 0x128a8b05.
//
// Solidity: function uniswapAddr() view returns(address)
func (_OriginVault *OriginVaultCaller) UniswapAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "uniswapAddr")
	return *ret0, err
}

// UniswapAddr is a free data retrieval call binding the contract method 0x128a8b05.
//
// Solidity: function uniswapAddr() view returns(address)
func (_OriginVault *OriginVaultSession) UniswapAddr() (common.Address, error) {
	return _OriginVault.Contract.UniswapAddr(&_OriginVault.CallOpts)
}

// UniswapAddr is a free data retrieval call binding the contract method 0x128a8b05.
//
// Solidity: function uniswapAddr() view returns(address)
func (_OriginVault *OriginVaultCallerSession) UniswapAddr() (common.Address, error) {
	return _OriginVault.Contract.UniswapAddr(&_OriginVault.CallOpts)
}

// VaultBuffer is a free data retrieval call binding the contract method 0x1edfe3da.
//
// Solidity: function vaultBuffer() view returns(uint256)
func (_OriginVault *OriginVaultCaller) VaultBuffer(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _OriginVault.contract.Call(opts, out, "vaultBuffer")
	return *ret0, err
}

// VaultBuffer is a free data retrieval call binding the contract method 0x1edfe3da.
//
// Solidity: function vaultBuffer() view returns(uint256)
func (_OriginVault *OriginVaultSession) VaultBuffer() (*big.Int, error) {
	return _OriginVault.Contract.VaultBuffer(&_OriginVault.CallOpts)
}

// VaultBuffer is a free data retrieval call binding the contract method 0x1edfe3da.
//
// Solidity: function vaultBuffer() view returns(uint256)
func (_OriginVault *OriginVaultCallerSession) VaultBuffer() (*big.Int, error) {
	return _OriginVault.Contract.VaultBuffer(&_OriginVault.CallOpts)
}

// AddStrategy is a paid mutator transaction binding the contract method 0xc9411e22.
//
// Solidity: function addStrategy(address _addr, uint256 _targetWeight) returns()
func (_OriginVault *OriginVaultTransactor) AddStrategy(opts *bind.TransactOpts, _addr common.Address, _targetWeight *big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "addStrategy", _addr, _targetWeight)
}

// AddStrategy is a paid mutator transaction binding the contract method 0xc9411e22.
//
// Solidity: function addStrategy(address _addr, uint256 _targetWeight) returns()
func (_OriginVault *OriginVaultSession) AddStrategy(_addr common.Address, _targetWeight *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.AddStrategy(&_OriginVault.TransactOpts, _addr, _targetWeight)
}

// AddStrategy is a paid mutator transaction binding the contract method 0xc9411e22.
//
// Solidity: function addStrategy(address _addr, uint256 _targetWeight) returns()
func (_OriginVault *OriginVaultTransactorSession) AddStrategy(_addr common.Address, _targetWeight *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.AddStrategy(&_OriginVault.TransactOpts, _addr, _targetWeight)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_OriginVault *OriginVaultTransactor) ClaimGovernance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "claimGovernance")
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_OriginVault *OriginVaultSession) ClaimGovernance() (*types.Transaction, error) {
	return _OriginVault.Contract.ClaimGovernance(&_OriginVault.TransactOpts)
}

// ClaimGovernance is a paid mutator transaction binding the contract method 0x5d36b190.
//
// Solidity: function claimGovernance() returns()
func (_OriginVault *OriginVaultTransactorSession) ClaimGovernance() (*types.Transaction, error) {
	return _OriginVault.Contract.ClaimGovernance(&_OriginVault.TransactOpts)
}

// Harvest is a paid mutator transaction binding the contract method 0x0e5c011e.
//
// Solidity: function harvest(address _strategyAddr) returns()
func (_OriginVault *OriginVaultTransactor) Harvest(opts *bind.TransactOpts, _strategyAddr common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "harvest", _strategyAddr)
}

// Harvest is a paid mutator transaction binding the contract method 0x0e5c011e.
//
// Solidity: function harvest(address _strategyAddr) returns()
func (_OriginVault *OriginVaultSession) Harvest(_strategyAddr common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.Harvest(&_OriginVault.TransactOpts, _strategyAddr)
}

// Harvest is a paid mutator transaction binding the contract method 0x0e5c011e.
//
// Solidity: function harvest(address _strategyAddr) returns()
func (_OriginVault *OriginVaultTransactorSession) Harvest(_strategyAddr common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.Harvest(&_OriginVault.TransactOpts, _strategyAddr)
}

// Harvest0 is a paid mutator transaction binding the contract method 0x4641257d.
//
// Solidity: function harvest() returns()
func (_OriginVault *OriginVaultTransactor) Harvest0(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "harvest0")
}

// Harvest0 is a paid mutator transaction binding the contract method 0x4641257d.
//
// Solidity: function harvest() returns()
func (_OriginVault *OriginVaultSession) Harvest0() (*types.Transaction, error) {
	return _OriginVault.Contract.Harvest0(&_OriginVault.TransactOpts)
}

// Harvest0 is a paid mutator transaction binding the contract method 0x4641257d.
//
// Solidity: function harvest() returns()
func (_OriginVault *OriginVaultTransactorSession) Harvest0() (*types.Transaction, error) {
	return _OriginVault.Contract.Harvest0(&_OriginVault.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _priceProvider, address _ousd) returns()
func (_OriginVault *OriginVaultTransactor) Initialize(opts *bind.TransactOpts, _priceProvider common.Address, _ousd common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "initialize", _priceProvider, _ousd)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _priceProvider, address _ousd) returns()
func (_OriginVault *OriginVaultSession) Initialize(_priceProvider common.Address, _ousd common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.Initialize(&_OriginVault.TransactOpts, _priceProvider, _ousd)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _priceProvider, address _ousd) returns()
func (_OriginVault *OriginVaultTransactorSession) Initialize(_priceProvider common.Address, _ousd common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.Initialize(&_OriginVault.TransactOpts, _priceProvider, _ousd)
}

// PauseDeposits is a paid mutator transaction binding the contract method 0x02191980.
//
// Solidity: function pauseDeposits() returns()
func (_OriginVault *OriginVaultTransactor) PauseDeposits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "pauseDeposits")
}

// PauseDeposits is a paid mutator transaction binding the contract method 0x02191980.
//
// Solidity: function pauseDeposits() returns()
func (_OriginVault *OriginVaultSession) PauseDeposits() (*types.Transaction, error) {
	return _OriginVault.Contract.PauseDeposits(&_OriginVault.TransactOpts)
}

// PauseDeposits is a paid mutator transaction binding the contract method 0x02191980.
//
// Solidity: function pauseDeposits() returns()
func (_OriginVault *OriginVaultTransactorSession) PauseDeposits() (*types.Transaction, error) {
	return _OriginVault.Contract.PauseDeposits(&_OriginVault.TransactOpts)
}

// PauseRebase is a paid mutator transaction binding the contract method 0xc5f00841.
//
// Solidity: function pauseRebase() returns()
func (_OriginVault *OriginVaultTransactor) PauseRebase(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "pauseRebase")
}

// PauseRebase is a paid mutator transaction binding the contract method 0xc5f00841.
//
// Solidity: function pauseRebase() returns()
func (_OriginVault *OriginVaultSession) PauseRebase() (*types.Transaction, error) {
	return _OriginVault.Contract.PauseRebase(&_OriginVault.TransactOpts)
}

// PauseRebase is a paid mutator transaction binding the contract method 0xc5f00841.
//
// Solidity: function pauseRebase() returns()
func (_OriginVault *OriginVaultTransactorSession) PauseRebase() (*types.Transaction, error) {
	return _OriginVault.Contract.PauseRebase(&_OriginVault.TransactOpts)
}

// PriceUSDMint is a paid mutator transaction binding the contract method 0x686b37ca.
//
// Solidity: function priceUSDMint(string symbol) returns(uint256)
func (_OriginVault *OriginVaultTransactor) PriceUSDMint(opts *bind.TransactOpts, symbol string) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "priceUSDMint", symbol)
}

// PriceUSDMint is a paid mutator transaction binding the contract method 0x686b37ca.
//
// Solidity: function priceUSDMint(string symbol) returns(uint256)
func (_OriginVault *OriginVaultSession) PriceUSDMint(symbol string) (*types.Transaction, error) {
	return _OriginVault.Contract.PriceUSDMint(&_OriginVault.TransactOpts, symbol)
}

// PriceUSDMint is a paid mutator transaction binding the contract method 0x686b37ca.
//
// Solidity: function priceUSDMint(string symbol) returns(uint256)
func (_OriginVault *OriginVaultTransactorSession) PriceUSDMint(symbol string) (*types.Transaction, error) {
	return _OriginVault.Contract.PriceUSDMint(&_OriginVault.TransactOpts, symbol)
}

// PriceUSDRedeem is a paid mutator transaction binding the contract method 0x29a903ec.
//
// Solidity: function priceUSDRedeem(string symbol) returns(uint256)
func (_OriginVault *OriginVaultTransactor) PriceUSDRedeem(opts *bind.TransactOpts, symbol string) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "priceUSDRedeem", symbol)
}

// PriceUSDRedeem is a paid mutator transaction binding the contract method 0x29a903ec.
//
// Solidity: function priceUSDRedeem(string symbol) returns(uint256)
func (_OriginVault *OriginVaultSession) PriceUSDRedeem(symbol string) (*types.Transaction, error) {
	return _OriginVault.Contract.PriceUSDRedeem(&_OriginVault.TransactOpts, symbol)
}

// PriceUSDRedeem is a paid mutator transaction binding the contract method 0x29a903ec.
//
// Solidity: function priceUSDRedeem(string symbol) returns(uint256)
func (_OriginVault *OriginVaultTransactorSession) PriceUSDRedeem(symbol string) (*types.Transaction, error) {
	return _OriginVault.Contract.PriceUSDRedeem(&_OriginVault.TransactOpts, symbol)
}

// RemoveStrategy is a paid mutator transaction binding the contract method 0x175188e8.
//
// Solidity: function removeStrategy(address _addr) returns()
func (_OriginVault *OriginVaultTransactor) RemoveStrategy(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "removeStrategy", _addr)
}

// RemoveStrategy is a paid mutator transaction binding the contract method 0x175188e8.
//
// Solidity: function removeStrategy(address _addr) returns()
func (_OriginVault *OriginVaultSession) RemoveStrategy(_addr common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.RemoveStrategy(&_OriginVault.TransactOpts, _addr)
}

// RemoveStrategy is a paid mutator transaction binding the contract method 0x175188e8.
//
// Solidity: function removeStrategy(address _addr) returns()
func (_OriginVault *OriginVaultTransactorSession) RemoveStrategy(_addr common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.RemoveStrategy(&_OriginVault.TransactOpts, _addr)
}

// SetAdminImpl is a paid mutator transaction binding the contract method 0xfc0cfeee.
//
// Solidity: function setAdminImpl(address newImpl) returns()
func (_OriginVault *OriginVaultTransactor) SetAdminImpl(opts *bind.TransactOpts, newImpl common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setAdminImpl", newImpl)
}

// SetAdminImpl is a paid mutator transaction binding the contract method 0xfc0cfeee.
//
// Solidity: function setAdminImpl(address newImpl) returns()
func (_OriginVault *OriginVaultSession) SetAdminImpl(newImpl common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetAdminImpl(&_OriginVault.TransactOpts, newImpl)
}

// SetAdminImpl is a paid mutator transaction binding the contract method 0xfc0cfeee.
//
// Solidity: function setAdminImpl(address newImpl) returns()
func (_OriginVault *OriginVaultTransactorSession) SetAdminImpl(newImpl common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetAdminImpl(&_OriginVault.TransactOpts, newImpl)
}

// SetAutoAllocateThreshold is a paid mutator transaction binding the contract method 0xb2c9336d.
//
// Solidity: function setAutoAllocateThreshold(uint256 _threshold) returns()
func (_OriginVault *OriginVaultTransactor) SetAutoAllocateThreshold(opts *bind.TransactOpts, _threshold *big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setAutoAllocateThreshold", _threshold)
}

// SetAutoAllocateThreshold is a paid mutator transaction binding the contract method 0xb2c9336d.
//
// Solidity: function setAutoAllocateThreshold(uint256 _threshold) returns()
func (_OriginVault *OriginVaultSession) SetAutoAllocateThreshold(_threshold *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetAutoAllocateThreshold(&_OriginVault.TransactOpts, _threshold)
}

// SetAutoAllocateThreshold is a paid mutator transaction binding the contract method 0xb2c9336d.
//
// Solidity: function setAutoAllocateThreshold(uint256 _threshold) returns()
func (_OriginVault *OriginVaultTransactorSession) SetAutoAllocateThreshold(_threshold *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetAutoAllocateThreshold(&_OriginVault.TransactOpts, _threshold)
}

// SetPriceProvider is a paid mutator transaction binding the contract method 0x372aa224.
//
// Solidity: function setPriceProvider(address _priceProvider) returns()
func (_OriginVault *OriginVaultTransactor) SetPriceProvider(opts *bind.TransactOpts, _priceProvider common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setPriceProvider", _priceProvider)
}

// SetPriceProvider is a paid mutator transaction binding the contract method 0x372aa224.
//
// Solidity: function setPriceProvider(address _priceProvider) returns()
func (_OriginVault *OriginVaultSession) SetPriceProvider(_priceProvider common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetPriceProvider(&_OriginVault.TransactOpts, _priceProvider)
}

// SetPriceProvider is a paid mutator transaction binding the contract method 0x372aa224.
//
// Solidity: function setPriceProvider(address _priceProvider) returns()
func (_OriginVault *OriginVaultTransactorSession) SetPriceProvider(_priceProvider common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetPriceProvider(&_OriginVault.TransactOpts, _priceProvider)
}

// SetRebaseHooksAddr is a paid mutator transaction binding the contract method 0x1060a27c.
//
// Solidity: function setRebaseHooksAddr(address _address) returns()
func (_OriginVault *OriginVaultTransactor) SetRebaseHooksAddr(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setRebaseHooksAddr", _address)
}

// SetRebaseHooksAddr is a paid mutator transaction binding the contract method 0x1060a27c.
//
// Solidity: function setRebaseHooksAddr(address _address) returns()
func (_OriginVault *OriginVaultSession) SetRebaseHooksAddr(_address common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetRebaseHooksAddr(&_OriginVault.TransactOpts, _address)
}

// SetRebaseHooksAddr is a paid mutator transaction binding the contract method 0x1060a27c.
//
// Solidity: function setRebaseHooksAddr(address _address) returns()
func (_OriginVault *OriginVaultTransactorSession) SetRebaseHooksAddr(_address common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetRebaseHooksAddr(&_OriginVault.TransactOpts, _address)
}

// SetRebaseThreshold is a paid mutator transaction binding the contract method 0xb890ebf6.
//
// Solidity: function setRebaseThreshold(uint256 _threshold) returns()
func (_OriginVault *OriginVaultTransactor) SetRebaseThreshold(opts *bind.TransactOpts, _threshold *big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setRebaseThreshold", _threshold)
}

// SetRebaseThreshold is a paid mutator transaction binding the contract method 0xb890ebf6.
//
// Solidity: function setRebaseThreshold(uint256 _threshold) returns()
func (_OriginVault *OriginVaultSession) SetRebaseThreshold(_threshold *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetRebaseThreshold(&_OriginVault.TransactOpts, _threshold)
}

// SetRebaseThreshold is a paid mutator transaction binding the contract method 0xb890ebf6.
//
// Solidity: function setRebaseThreshold(uint256 _threshold) returns()
func (_OriginVault *OriginVaultTransactorSession) SetRebaseThreshold(_threshold *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetRebaseThreshold(&_OriginVault.TransactOpts, _threshold)
}

// SetRedeemFeeBps is a paid mutator transaction binding the contract method 0xeb03654b.
//
// Solidity: function setRedeemFeeBps(uint256 _redeemFeeBps) returns()
func (_OriginVault *OriginVaultTransactor) SetRedeemFeeBps(opts *bind.TransactOpts, _redeemFeeBps *big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setRedeemFeeBps", _redeemFeeBps)
}

// SetRedeemFeeBps is a paid mutator transaction binding the contract method 0xeb03654b.
//
// Solidity: function setRedeemFeeBps(uint256 _redeemFeeBps) returns()
func (_OriginVault *OriginVaultSession) SetRedeemFeeBps(_redeemFeeBps *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetRedeemFeeBps(&_OriginVault.TransactOpts, _redeemFeeBps)
}

// SetRedeemFeeBps is a paid mutator transaction binding the contract method 0xeb03654b.
//
// Solidity: function setRedeemFeeBps(uint256 _redeemFeeBps) returns()
func (_OriginVault *OriginVaultTransactorSession) SetRedeemFeeBps(_redeemFeeBps *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetRedeemFeeBps(&_OriginVault.TransactOpts, _redeemFeeBps)
}

// SetStrategyWeights is a paid mutator transaction binding the contract method 0x4dab68b3.
//
// Solidity: function setStrategyWeights(address[] _strategyAddresses, uint256[] _weights) returns()
func (_OriginVault *OriginVaultTransactor) SetStrategyWeights(opts *bind.TransactOpts, _strategyAddresses []common.Address, _weights []*big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setStrategyWeights", _strategyAddresses, _weights)
}

// SetStrategyWeights is a paid mutator transaction binding the contract method 0x4dab68b3.
//
// Solidity: function setStrategyWeights(address[] _strategyAddresses, uint256[] _weights) returns()
func (_OriginVault *OriginVaultSession) SetStrategyWeights(_strategyAddresses []common.Address, _weights []*big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetStrategyWeights(&_OriginVault.TransactOpts, _strategyAddresses, _weights)
}

// SetStrategyWeights is a paid mutator transaction binding the contract method 0x4dab68b3.
//
// Solidity: function setStrategyWeights(address[] _strategyAddresses, uint256[] _weights) returns()
func (_OriginVault *OriginVaultTransactorSession) SetStrategyWeights(_strategyAddresses []common.Address, _weights []*big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetStrategyWeights(&_OriginVault.TransactOpts, _strategyAddresses, _weights)
}

// SetUniswapAddr is a paid mutator transaction binding the contract method 0xaea173d5.
//
// Solidity: function setUniswapAddr(address _address) returns()
func (_OriginVault *OriginVaultTransactor) SetUniswapAddr(opts *bind.TransactOpts, _address common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setUniswapAddr", _address)
}

// SetUniswapAddr is a paid mutator transaction binding the contract method 0xaea173d5.
//
// Solidity: function setUniswapAddr(address _address) returns()
func (_OriginVault *OriginVaultSession) SetUniswapAddr(_address common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetUniswapAddr(&_OriginVault.TransactOpts, _address)
}

// SetUniswapAddr is a paid mutator transaction binding the contract method 0xaea173d5.
//
// Solidity: function setUniswapAddr(address _address) returns()
func (_OriginVault *OriginVaultTransactorSession) SetUniswapAddr(_address common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SetUniswapAddr(&_OriginVault.TransactOpts, _address)
}

// SetVaultBuffer is a paid mutator transaction binding the contract method 0x8ec489a2.
//
// Solidity: function setVaultBuffer(uint256 _vaultBuffer) returns()
func (_OriginVault *OriginVaultTransactor) SetVaultBuffer(opts *bind.TransactOpts, _vaultBuffer *big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "setVaultBuffer", _vaultBuffer)
}

// SetVaultBuffer is a paid mutator transaction binding the contract method 0x8ec489a2.
//
// Solidity: function setVaultBuffer(uint256 _vaultBuffer) returns()
func (_OriginVault *OriginVaultSession) SetVaultBuffer(_vaultBuffer *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetVaultBuffer(&_OriginVault.TransactOpts, _vaultBuffer)
}

// SetVaultBuffer is a paid mutator transaction binding the contract method 0x8ec489a2.
//
// Solidity: function setVaultBuffer(uint256 _vaultBuffer) returns()
func (_OriginVault *OriginVaultTransactorSession) SetVaultBuffer(_vaultBuffer *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.SetVaultBuffer(&_OriginVault.TransactOpts, _vaultBuffer)
}

// SupportAsset is a paid mutator transaction binding the contract method 0x4cd55c2d.
//
// Solidity: function supportAsset(address _asset) returns()
func (_OriginVault *OriginVaultTransactor) SupportAsset(opts *bind.TransactOpts, _asset common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "supportAsset", _asset)
}

// SupportAsset is a paid mutator transaction binding the contract method 0x4cd55c2d.
//
// Solidity: function supportAsset(address _asset) returns()
func (_OriginVault *OriginVaultSession) SupportAsset(_asset common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SupportAsset(&_OriginVault.TransactOpts, _asset)
}

// SupportAsset is a paid mutator transaction binding the contract method 0x4cd55c2d.
//
// Solidity: function supportAsset(address _asset) returns()
func (_OriginVault *OriginVaultTransactorSession) SupportAsset(_asset common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.SupportAsset(&_OriginVault.TransactOpts, _asset)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _newGovernor) returns()
func (_OriginVault *OriginVaultTransactor) TransferGovernance(opts *bind.TransactOpts, _newGovernor common.Address) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "transferGovernance", _newGovernor)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _newGovernor) returns()
func (_OriginVault *OriginVaultSession) TransferGovernance(_newGovernor common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.TransferGovernance(&_OriginVault.TransactOpts, _newGovernor)
}

// TransferGovernance is a paid mutator transaction binding the contract method 0xd38bfff4.
//
// Solidity: function transferGovernance(address _newGovernor) returns()
func (_OriginVault *OriginVaultTransactorSession) TransferGovernance(_newGovernor common.Address) (*types.Transaction, error) {
	return _OriginVault.Contract.TransferGovernance(&_OriginVault.TransactOpts, _newGovernor)
}

// TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.
//
// Solidity: function transferToken(address _asset, uint256 _amount) returns()
func (_OriginVault *OriginVaultTransactor) TransferToken(opts *bind.TransactOpts, _asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "transferToken", _asset, _amount)
}

// TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.
//
// Solidity: function transferToken(address _asset, uint256 _amount) returns()
func (_OriginVault *OriginVaultSession) TransferToken(_asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.TransferToken(&_OriginVault.TransactOpts, _asset, _amount)
}

// TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.
//
// Solidity: function transferToken(address _asset, uint256 _amount) returns()
func (_OriginVault *OriginVaultTransactorSession) TransferToken(_asset common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _OriginVault.Contract.TransferToken(&_OriginVault.TransactOpts, _asset, _amount)
}

// UnpauseDeposits is a paid mutator transaction binding the contract method 0x63d8882a.
//
// Solidity: function unpauseDeposits() returns()
func (_OriginVault *OriginVaultTransactor) UnpauseDeposits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "unpauseDeposits")
}

// UnpauseDeposits is a paid mutator transaction binding the contract method 0x63d8882a.
//
// Solidity: function unpauseDeposits() returns()
func (_OriginVault *OriginVaultSession) UnpauseDeposits() (*types.Transaction, error) {
	return _OriginVault.Contract.UnpauseDeposits(&_OriginVault.TransactOpts)
}

// UnpauseDeposits is a paid mutator transaction binding the contract method 0x63d8882a.
//
// Solidity: function unpauseDeposits() returns()
func (_OriginVault *OriginVaultTransactorSession) UnpauseDeposits() (*types.Transaction, error) {
	return _OriginVault.Contract.UnpauseDeposits(&_OriginVault.TransactOpts)
}

// UnpauseRebase is a paid mutator transaction binding the contract method 0x09f49bf5.
//
// Solidity: function unpauseRebase() returns()
func (_OriginVault *OriginVaultTransactor) UnpauseRebase(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OriginVault.contract.Transact(opts, "unpauseRebase")
}

// UnpauseRebase is a paid mutator transaction binding the contract method 0x09f49bf5.
//
// Solidity: function unpauseRebase() returns()
func (_OriginVault *OriginVaultSession) UnpauseRebase() (*types.Transaction, error) {
	return _OriginVault.Contract.UnpauseRebase(&_OriginVault.TransactOpts)
}

// UnpauseRebase is a paid mutator transaction binding the contract method 0x09f49bf5.
//
// Solidity: function unpauseRebase() returns()
func (_OriginVault *OriginVaultTransactorSession) UnpauseRebase() (*types.Transaction, error) {
	return _OriginVault.Contract.UnpauseRebase(&_OriginVault.TransactOpts)
}

// OriginVaultAssetSupportedIterator is returned from FilterAssetSupported and is used to iterate over the raw logs and unpacked data for AssetSupported events raised by the OriginVault contract.
type OriginVaultAssetSupportedIterator struct {
	Event *OriginVaultAssetSupported // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultAssetSupportedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultAssetSupported)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultAssetSupported)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultAssetSupportedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultAssetSupportedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultAssetSupported represents a AssetSupported event raised by the OriginVault contract.
type OriginVaultAssetSupported struct {
	Asset common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAssetSupported is a free log retrieval operation binding the contract event 0x4f1ac48525e50059cc1cc6e0e1940ece0dd653a4db4841538d6aef036be2fb7b.
//
// Solidity: event AssetSupported(address _asset)
func (_OriginVault *OriginVaultFilterer) FilterAssetSupported(opts *bind.FilterOpts) (*OriginVaultAssetSupportedIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "AssetSupported")
	if err != nil {
		return nil, err
	}
	return &OriginVaultAssetSupportedIterator{contract: _OriginVault.contract, event: "AssetSupported", logs: logs, sub: sub}, nil
}

// WatchAssetSupported is a free log subscription operation binding the contract event 0x4f1ac48525e50059cc1cc6e0e1940ece0dd653a4db4841538d6aef036be2fb7b.
//
// Solidity: event AssetSupported(address _asset)
func (_OriginVault *OriginVaultFilterer) WatchAssetSupported(opts *bind.WatchOpts, sink chan<- *OriginVaultAssetSupported) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "AssetSupported")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultAssetSupported)
				if err := _OriginVault.contract.UnpackLog(event, "AssetSupported", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAssetSupported is a log parse operation binding the contract event 0x4f1ac48525e50059cc1cc6e0e1940ece0dd653a4db4841538d6aef036be2fb7b.
//
// Solidity: event AssetSupported(address _asset)
func (_OriginVault *OriginVaultFilterer) ParseAssetSupported(log types.Log) (*OriginVaultAssetSupported, error) {
	event := new(OriginVaultAssetSupported)
	if err := _OriginVault.contract.UnpackLog(event, "AssetSupported", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultDepositsPausedIterator is returned from FilterDepositsPaused and is used to iterate over the raw logs and unpacked data for DepositsPaused events raised by the OriginVault contract.
type OriginVaultDepositsPausedIterator struct {
	Event *OriginVaultDepositsPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultDepositsPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultDepositsPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultDepositsPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultDepositsPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultDepositsPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultDepositsPaused represents a DepositsPaused event raised by the OriginVault contract.
type OriginVaultDepositsPaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDepositsPaused is a free log retrieval operation binding the contract event 0xdeeb69430b7153361c25d630947115165636e6a723fa8daea4b0de34b3247459.
//
// Solidity: event DepositsPaused()
func (_OriginVault *OriginVaultFilterer) FilterDepositsPaused(opts *bind.FilterOpts) (*OriginVaultDepositsPausedIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "DepositsPaused")
	if err != nil {
		return nil, err
	}
	return &OriginVaultDepositsPausedIterator{contract: _OriginVault.contract, event: "DepositsPaused", logs: logs, sub: sub}, nil
}

// WatchDepositsPaused is a free log subscription operation binding the contract event 0xdeeb69430b7153361c25d630947115165636e6a723fa8daea4b0de34b3247459.
//
// Solidity: event DepositsPaused()
func (_OriginVault *OriginVaultFilterer) WatchDepositsPaused(opts *bind.WatchOpts, sink chan<- *OriginVaultDepositsPaused) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "DepositsPaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultDepositsPaused)
				if err := _OriginVault.contract.UnpackLog(event, "DepositsPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositsPaused is a log parse operation binding the contract event 0xdeeb69430b7153361c25d630947115165636e6a723fa8daea4b0de34b3247459.
//
// Solidity: event DepositsPaused()
func (_OriginVault *OriginVaultFilterer) ParseDepositsPaused(log types.Log) (*OriginVaultDepositsPaused, error) {
	event := new(OriginVaultDepositsPaused)
	if err := _OriginVault.contract.UnpackLog(event, "DepositsPaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultDepositsUnpausedIterator is returned from FilterDepositsUnpaused and is used to iterate over the raw logs and unpacked data for DepositsUnpaused events raised by the OriginVault contract.
type OriginVaultDepositsUnpausedIterator struct {
	Event *OriginVaultDepositsUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultDepositsUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultDepositsUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultDepositsUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultDepositsUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultDepositsUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultDepositsUnpaused represents a DepositsUnpaused event raised by the OriginVault contract.
type OriginVaultDepositsUnpaused struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDepositsUnpaused is a free log retrieval operation binding the contract event 0x823084e804e36d8971e8b86749b6b0ace7b9f87ed272bef910c1e72d123eeb48.
//
// Solidity: event DepositsUnpaused()
func (_OriginVault *OriginVaultFilterer) FilterDepositsUnpaused(opts *bind.FilterOpts) (*OriginVaultDepositsUnpausedIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "DepositsUnpaused")
	if err != nil {
		return nil, err
	}
	return &OriginVaultDepositsUnpausedIterator{contract: _OriginVault.contract, event: "DepositsUnpaused", logs: logs, sub: sub}, nil
}

// WatchDepositsUnpaused is a free log subscription operation binding the contract event 0x823084e804e36d8971e8b86749b6b0ace7b9f87ed272bef910c1e72d123eeb48.
//
// Solidity: event DepositsUnpaused()
func (_OriginVault *OriginVaultFilterer) WatchDepositsUnpaused(opts *bind.WatchOpts, sink chan<- *OriginVaultDepositsUnpaused) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "DepositsUnpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultDepositsUnpaused)
				if err := _OriginVault.contract.UnpackLog(event, "DepositsUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepositsUnpaused is a log parse operation binding the contract event 0x823084e804e36d8971e8b86749b6b0ace7b9f87ed272bef910c1e72d123eeb48.
//
// Solidity: event DepositsUnpaused()
func (_OriginVault *OriginVaultFilterer) ParseDepositsUnpaused(log types.Log) (*OriginVaultDepositsUnpaused, error) {
	event := new(OriginVaultDepositsUnpaused)
	if err := _OriginVault.contract.UnpackLog(event, "DepositsUnpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultGovernorshipTransferredIterator is returned from FilterGovernorshipTransferred and is used to iterate over the raw logs and unpacked data for GovernorshipTransferred events raised by the OriginVault contract.
type OriginVaultGovernorshipTransferredIterator struct {
	Event *OriginVaultGovernorshipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultGovernorshipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultGovernorshipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultGovernorshipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultGovernorshipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultGovernorshipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultGovernorshipTransferred represents a GovernorshipTransferred event raised by the OriginVault contract.
type OriginVaultGovernorshipTransferred struct {
	PreviousGovernor common.Address
	NewGovernor      common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterGovernorshipTransferred is a free log retrieval operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_OriginVault *OriginVaultFilterer) FilterGovernorshipTransferred(opts *bind.FilterOpts, previousGovernor []common.Address, newGovernor []common.Address) (*OriginVaultGovernorshipTransferredIterator, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "GovernorshipTransferred", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return &OriginVaultGovernorshipTransferredIterator{contract: _OriginVault.contract, event: "GovernorshipTransferred", logs: logs, sub: sub}, nil
}

// WatchGovernorshipTransferred is a free log subscription operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_OriginVault *OriginVaultFilterer) WatchGovernorshipTransferred(opts *bind.WatchOpts, sink chan<- *OriginVaultGovernorshipTransferred, previousGovernor []common.Address, newGovernor []common.Address) (event.Subscription, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "GovernorshipTransferred", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultGovernorshipTransferred)
				if err := _OriginVault.contract.UnpackLog(event, "GovernorshipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernorshipTransferred is a log parse operation binding the contract event 0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a.
//
// Solidity: event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor)
func (_OriginVault *OriginVaultFilterer) ParseGovernorshipTransferred(log types.Log) (*OriginVaultGovernorshipTransferred, error) {
	event := new(OriginVaultGovernorshipTransferred)
	if err := _OriginVault.contract.UnpackLog(event, "GovernorshipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the OriginVault contract.
type OriginVaultMintIterator struct {
	Event *OriginVaultMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultMint represents a Mint event raised by the OriginVault contract.
type OriginVaultMint struct {
	Addr  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address _addr, uint256 _value)
func (_OriginVault *OriginVaultFilterer) FilterMint(opts *bind.FilterOpts) (*OriginVaultMintIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &OriginVaultMintIterator{contract: _OriginVault.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address _addr, uint256 _value)
func (_OriginVault *OriginVaultFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *OriginVaultMint) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultMint)
				if err := _OriginVault.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: event Mint(address _addr, uint256 _value)
func (_OriginVault *OriginVaultFilterer) ParseMint(log types.Log) (*OriginVaultMint, error) {
	event := new(OriginVaultMint)
	if err := _OriginVault.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultPendingGovernorshipTransferIterator is returned from FilterPendingGovernorshipTransfer and is used to iterate over the raw logs and unpacked data for PendingGovernorshipTransfer events raised by the OriginVault contract.
type OriginVaultPendingGovernorshipTransferIterator struct {
	Event *OriginVaultPendingGovernorshipTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultPendingGovernorshipTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultPendingGovernorshipTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultPendingGovernorshipTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultPendingGovernorshipTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultPendingGovernorshipTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultPendingGovernorshipTransfer represents a PendingGovernorshipTransfer event raised by the OriginVault contract.
type OriginVaultPendingGovernorshipTransfer struct {
	PreviousGovernor common.Address
	NewGovernor      common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterPendingGovernorshipTransfer is a free log retrieval operation binding the contract event 0xa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d.
//
// Solidity: event PendingGovernorshipTransfer(address indexed previousGovernor, address indexed newGovernor)
func (_OriginVault *OriginVaultFilterer) FilterPendingGovernorshipTransfer(opts *bind.FilterOpts, previousGovernor []common.Address, newGovernor []common.Address) (*OriginVaultPendingGovernorshipTransferIterator, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "PendingGovernorshipTransfer", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return &OriginVaultPendingGovernorshipTransferIterator{contract: _OriginVault.contract, event: "PendingGovernorshipTransfer", logs: logs, sub: sub}, nil
}

// WatchPendingGovernorshipTransfer is a free log subscription operation binding the contract event 0xa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d.
//
// Solidity: event PendingGovernorshipTransfer(address indexed previousGovernor, address indexed newGovernor)
func (_OriginVault *OriginVaultFilterer) WatchPendingGovernorshipTransfer(opts *bind.WatchOpts, sink chan<- *OriginVaultPendingGovernorshipTransfer, previousGovernor []common.Address, newGovernor []common.Address) (event.Subscription, error) {

	var previousGovernorRule []interface{}
	for _, previousGovernorItem := range previousGovernor {
		previousGovernorRule = append(previousGovernorRule, previousGovernorItem)
	}
	var newGovernorRule []interface{}
	for _, newGovernorItem := range newGovernor {
		newGovernorRule = append(newGovernorRule, newGovernorItem)
	}

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "PendingGovernorshipTransfer", previousGovernorRule, newGovernorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultPendingGovernorshipTransfer)
				if err := _OriginVault.contract.UnpackLog(event, "PendingGovernorshipTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePendingGovernorshipTransfer is a log parse operation binding the contract event 0xa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d.
//
// Solidity: event PendingGovernorshipTransfer(address indexed previousGovernor, address indexed newGovernor)
func (_OriginVault *OriginVaultFilterer) ParsePendingGovernorshipTransfer(log types.Log) (*OriginVaultPendingGovernorshipTransfer, error) {
	event := new(OriginVaultPendingGovernorshipTransfer)
	if err := _OriginVault.contract.UnpackLog(event, "PendingGovernorshipTransfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultRedeemIterator is returned from FilterRedeem and is used to iterate over the raw logs and unpacked data for Redeem events raised by the OriginVault contract.
type OriginVaultRedeemIterator struct {
	Event *OriginVaultRedeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultRedeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultRedeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultRedeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultRedeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultRedeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultRedeem represents a Redeem event raised by the OriginVault contract.
type OriginVaultRedeem struct {
	Addr  common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRedeem is a free log retrieval operation binding the contract event 0x222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6.
//
// Solidity: event Redeem(address _addr, uint256 _value)
func (_OriginVault *OriginVaultFilterer) FilterRedeem(opts *bind.FilterOpts) (*OriginVaultRedeemIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "Redeem")
	if err != nil {
		return nil, err
	}
	return &OriginVaultRedeemIterator{contract: _OriginVault.contract, event: "Redeem", logs: logs, sub: sub}, nil
}

// WatchRedeem is a free log subscription operation binding the contract event 0x222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6.
//
// Solidity: event Redeem(address _addr, uint256 _value)
func (_OriginVault *OriginVaultFilterer) WatchRedeem(opts *bind.WatchOpts, sink chan<- *OriginVaultRedeem) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "Redeem")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultRedeem)
				if err := _OriginVault.contract.UnpackLog(event, "Redeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeem is a log parse operation binding the contract event 0x222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6.
//
// Solidity: event Redeem(address _addr, uint256 _value)
func (_OriginVault *OriginVaultFilterer) ParseRedeem(log types.Log) (*OriginVaultRedeem, error) {
	event := new(OriginVaultRedeem)
	if err := _OriginVault.contract.UnpackLog(event, "Redeem", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultStrategyAddedIterator is returned from FilterStrategyAdded and is used to iterate over the raw logs and unpacked data for StrategyAdded events raised by the OriginVault contract.
type OriginVaultStrategyAddedIterator struct {
	Event *OriginVaultStrategyAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultStrategyAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultStrategyAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultStrategyAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultStrategyAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultStrategyAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultStrategyAdded represents a StrategyAdded event raised by the OriginVault contract.
type OriginVaultStrategyAdded struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterStrategyAdded is a free log retrieval operation binding the contract event 0x3f008fd510eae7a9e7bee13513d7b83bef8003d488b5a3d0b0da4de71d6846f1.
//
// Solidity: event StrategyAdded(address _addr)
func (_OriginVault *OriginVaultFilterer) FilterStrategyAdded(opts *bind.FilterOpts) (*OriginVaultStrategyAddedIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "StrategyAdded")
	if err != nil {
		return nil, err
	}
	return &OriginVaultStrategyAddedIterator{contract: _OriginVault.contract, event: "StrategyAdded", logs: logs, sub: sub}, nil
}

// WatchStrategyAdded is a free log subscription operation binding the contract event 0x3f008fd510eae7a9e7bee13513d7b83bef8003d488b5a3d0b0da4de71d6846f1.
//
// Solidity: event StrategyAdded(address _addr)
func (_OriginVault *OriginVaultFilterer) WatchStrategyAdded(opts *bind.WatchOpts, sink chan<- *OriginVaultStrategyAdded) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "StrategyAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultStrategyAdded)
				if err := _OriginVault.contract.UnpackLog(event, "StrategyAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyAdded is a log parse operation binding the contract event 0x3f008fd510eae7a9e7bee13513d7b83bef8003d488b5a3d0b0da4de71d6846f1.
//
// Solidity: event StrategyAdded(address _addr)
func (_OriginVault *OriginVaultFilterer) ParseStrategyAdded(log types.Log) (*OriginVaultStrategyAdded, error) {
	event := new(OriginVaultStrategyAdded)
	if err := _OriginVault.contract.UnpackLog(event, "StrategyAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultStrategyRemovedIterator is returned from FilterStrategyRemoved and is used to iterate over the raw logs and unpacked data for StrategyRemoved events raised by the OriginVault contract.
type OriginVaultStrategyRemovedIterator struct {
	Event *OriginVaultStrategyRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultStrategyRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultStrategyRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultStrategyRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultStrategyRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultStrategyRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultStrategyRemoved represents a StrategyRemoved event raised by the OriginVault contract.
type OriginVaultStrategyRemoved struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterStrategyRemoved is a free log retrieval operation binding the contract event 0x09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea4.
//
// Solidity: event StrategyRemoved(address _addr)
func (_OriginVault *OriginVaultFilterer) FilterStrategyRemoved(opts *bind.FilterOpts) (*OriginVaultStrategyRemovedIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "StrategyRemoved")
	if err != nil {
		return nil, err
	}
	return &OriginVaultStrategyRemovedIterator{contract: _OriginVault.contract, event: "StrategyRemoved", logs: logs, sub: sub}, nil
}

// WatchStrategyRemoved is a free log subscription operation binding the contract event 0x09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea4.
//
// Solidity: event StrategyRemoved(address _addr)
func (_OriginVault *OriginVaultFilterer) WatchStrategyRemoved(opts *bind.WatchOpts, sink chan<- *OriginVaultStrategyRemoved) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "StrategyRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultStrategyRemoved)
				if err := _OriginVault.contract.UnpackLog(event, "StrategyRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyRemoved is a log parse operation binding the contract event 0x09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea4.
//
// Solidity: event StrategyRemoved(address _addr)
func (_OriginVault *OriginVaultFilterer) ParseStrategyRemoved(log types.Log) (*OriginVaultStrategyRemoved, error) {
	event := new(OriginVaultStrategyRemoved)
	if err := _OriginVault.contract.UnpackLog(event, "StrategyRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// OriginVaultStrategyWeightsUpdatedIterator is returned from FilterStrategyWeightsUpdated and is used to iterate over the raw logs and unpacked data for StrategyWeightsUpdated events raised by the OriginVault contract.
type OriginVaultStrategyWeightsUpdatedIterator struct {
	Event *OriginVaultStrategyWeightsUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OriginVaultStrategyWeightsUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OriginVaultStrategyWeightsUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OriginVaultStrategyWeightsUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OriginVaultStrategyWeightsUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OriginVaultStrategyWeightsUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OriginVaultStrategyWeightsUpdated represents a StrategyWeightsUpdated event raised by the OriginVault contract.
type OriginVaultStrategyWeightsUpdated struct {
	StrategyAddresses []common.Address
	Weights           []*big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterStrategyWeightsUpdated is a free log retrieval operation binding the contract event 0x96f2c15ff9c9cea757ec12e3f9aaa7705c3d0a154ee1e71c6e1221c8de0b7762.
//
// Solidity: event StrategyWeightsUpdated(address[] _strategyAddresses, uint256[] weights)
func (_OriginVault *OriginVaultFilterer) FilterStrategyWeightsUpdated(opts *bind.FilterOpts) (*OriginVaultStrategyWeightsUpdatedIterator, error) {

	logs, sub, err := _OriginVault.contract.FilterLogs(opts, "StrategyWeightsUpdated")
	if err != nil {
		return nil, err
	}
	return &OriginVaultStrategyWeightsUpdatedIterator{contract: _OriginVault.contract, event: "StrategyWeightsUpdated", logs: logs, sub: sub}, nil
}

// WatchStrategyWeightsUpdated is a free log subscription operation binding the contract event 0x96f2c15ff9c9cea757ec12e3f9aaa7705c3d0a154ee1e71c6e1221c8de0b7762.
//
// Solidity: event StrategyWeightsUpdated(address[] _strategyAddresses, uint256[] weights)
func (_OriginVault *OriginVaultFilterer) WatchStrategyWeightsUpdated(opts *bind.WatchOpts, sink chan<- *OriginVaultStrategyWeightsUpdated) (event.Subscription, error) {

	logs, sub, err := _OriginVault.contract.WatchLogs(opts, "StrategyWeightsUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OriginVaultStrategyWeightsUpdated)
				if err := _OriginVault.contract.UnpackLog(event, "StrategyWeightsUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyWeightsUpdated is a log parse operation binding the contract event 0x96f2c15ff9c9cea757ec12e3f9aaa7705c3d0a154ee1e71c6e1221c8de0b7762.
//
// Solidity: event StrategyWeightsUpdated(address[] _strategyAddresses, uint256[] weights)
func (_OriginVault *OriginVaultFilterer) ParseStrategyWeightsUpdated(log types.Log) (*OriginVaultStrategyWeightsUpdated, error) {
	event := new(OriginVaultStrategyWeightsUpdated)
	if err := _OriginVault.contract.UnpackLog(event, "StrategyWeightsUpdated", log); err != nil {
		return nil, err
	}
	return event, nil
}
