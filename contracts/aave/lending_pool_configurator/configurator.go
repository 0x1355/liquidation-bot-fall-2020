// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lending_pool_configurator

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LendingPoolConfiguratorABI is the input ABI used to generate the binding from.
const LendingPoolConfiguratorABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"CONFIGURATOR_REVISION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolAddressesProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_aToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"ReserveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_stableRateEnabled\",\"type\":\"bool\"}],\"name\":\"BorrowingEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"BorrowingDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"ReserveEnabledAsCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"ReserveDisabledAsCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"StableRateEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"StableRateDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"ReserveDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"ReserveFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"ReserveUnfreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ltv\",\"type\":\"uint256\"}],\"name\":\"ReserveBaseLtvChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"ReserveLiquidationThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"ReserveLiquidationBonusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"ReserveDecimalsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_reserve\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateStrategyChanged\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_poolAddressesProvider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_underlyingAssetDecimals\",\"type\":\"uint8\"},{\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_aTokenName\",\"type\":\"string\"},{\"name\":\"_aTokenSymbol\",\"type\":\"string\"},{\"name\":\"_underlyingAssetDecimals\",\"type\":\"uint8\"},{\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"initReserveWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveToRemove\",\"type\":\"address\"}],\"name\":\"removeLastAddedReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_stableBorrowRateEnabled\",\"type\":\"bool\"}],\"name\":\"enableBorrowingOnReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"disableBorrowingOnReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_baseLTVasCollateral\",\"type\":\"uint256\"},{\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"},{\"name\":\"_liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"enableReserveAsCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"disableReserveAsCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"enableReserveStableBorrowRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"disableReserveStableBorrowRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"activateReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"deactivateReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"freezeReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"}],\"name\":\"unfreezeReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_ltv\",\"type\":\"uint256\"}],\"name\":\"setReserveBaseLTVasCollateral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setReserveLiquidationThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setReserveLiquidationBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setReserveDecimals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refreshLendingPoolCoreConfiguration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LendingPoolConfiguratorBin is the compiled bytecode used for deploying new contracts.
var LendingPoolConfiguratorBin = ""

// DeployLendingPoolConfigurator deploys a new Ethereum contract, binding an instance of LendingPoolConfigurator to it.
func DeployLendingPoolConfigurator(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LendingPoolConfigurator, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolConfiguratorABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LendingPoolConfiguratorBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LendingPoolConfigurator{LendingPoolConfiguratorCaller: LendingPoolConfiguratorCaller{contract: contract}, LendingPoolConfiguratorTransactor: LendingPoolConfiguratorTransactor{contract: contract}, LendingPoolConfiguratorFilterer: LendingPoolConfiguratorFilterer{contract: contract}}, nil
}

// LendingPoolConfigurator is an auto generated Go binding around an Ethereum contract.
type LendingPoolConfigurator struct {
	LendingPoolConfiguratorCaller     // Read-only binding to the contract
	LendingPoolConfiguratorTransactor // Write-only binding to the contract
	LendingPoolConfiguratorFilterer   // Log filterer for contract events
}

// LendingPoolConfiguratorCaller is an auto generated read-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolConfiguratorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolConfiguratorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LendingPoolConfiguratorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LendingPoolConfiguratorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LendingPoolConfiguratorSession struct {
	Contract     *LendingPoolConfigurator // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// LendingPoolConfiguratorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LendingPoolConfiguratorCallerSession struct {
	Contract *LendingPoolConfiguratorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// LendingPoolConfiguratorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LendingPoolConfiguratorTransactorSession struct {
	Contract     *LendingPoolConfiguratorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// LendingPoolConfiguratorRaw is an auto generated low-level Go binding around an Ethereum contract.
type LendingPoolConfiguratorRaw struct {
	Contract *LendingPoolConfigurator // Generic contract binding to access the raw methods on
}

// LendingPoolConfiguratorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorCallerRaw struct {
	Contract *LendingPoolConfiguratorCaller // Generic read-only contract binding to access the raw methods on
}

// LendingPoolConfiguratorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LendingPoolConfiguratorTransactorRaw struct {
	Contract *LendingPoolConfiguratorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLendingPoolConfigurator creates a new instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfigurator(address common.Address, backend bind.ContractBackend) (*LendingPoolConfigurator, error) {
	contract, err := bindLendingPoolConfigurator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfigurator{LendingPoolConfiguratorCaller: LendingPoolConfiguratorCaller{contract: contract}, LendingPoolConfiguratorTransactor: LendingPoolConfiguratorTransactor{contract: contract}, LendingPoolConfiguratorFilterer: LendingPoolConfiguratorFilterer{contract: contract}}, nil
}

// NewLendingPoolConfiguratorCaller creates a new read-only instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfiguratorCaller(address common.Address, caller bind.ContractCaller) (*LendingPoolConfiguratorCaller, error) {
	contract, err := bindLendingPoolConfigurator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorCaller{contract: contract}, nil
}

// NewLendingPoolConfiguratorTransactor creates a new write-only instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfiguratorTransactor(address common.Address, transactor bind.ContractTransactor) (*LendingPoolConfiguratorTransactor, error) {
	contract, err := bindLendingPoolConfigurator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorTransactor{contract: contract}, nil
}

// NewLendingPoolConfiguratorFilterer creates a new log filterer instance of LendingPoolConfigurator, bound to a specific deployed contract.
func NewLendingPoolConfiguratorFilterer(address common.Address, filterer bind.ContractFilterer) (*LendingPoolConfiguratorFilterer, error) {
	contract, err := bindLendingPoolConfigurator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorFilterer{contract: contract}, nil
}

// bindLendingPoolConfigurator binds a generic wrapper to an already deployed contract.
func bindLendingPoolConfigurator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LendingPoolConfiguratorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolConfigurator *LendingPoolConfiguratorRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LendingPoolConfigurator.Contract.LendingPoolConfiguratorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolConfigurator *LendingPoolConfiguratorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.LendingPoolConfiguratorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolConfigurator *LendingPoolConfiguratorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.LendingPoolConfiguratorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LendingPoolConfigurator *LendingPoolConfiguratorCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _LendingPoolConfigurator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.contract.Transact(opts, method, params...)
}

// CONFIGURATORREVISION is a free data retrieval call binding the contract method 0x7af635a6.
//
// Solidity: function CONFIGURATOR_REVISION() view returns(uint256)
func (_LendingPoolConfigurator *LendingPoolConfiguratorCaller) CONFIGURATORREVISION(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _LendingPoolConfigurator.contract.Call(opts, out, "CONFIGURATOR_REVISION")
	return *ret0, err
}

// CONFIGURATORREVISION is a free data retrieval call binding the contract method 0x7af635a6.
//
// Solidity: function CONFIGURATOR_REVISION() view returns(uint256)
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) CONFIGURATORREVISION() (*big.Int, error) {
	return _LendingPoolConfigurator.Contract.CONFIGURATORREVISION(&_LendingPoolConfigurator.CallOpts)
}

// CONFIGURATORREVISION is a free data retrieval call binding the contract method 0x7af635a6.
//
// Solidity: function CONFIGURATOR_REVISION() view returns(uint256)
func (_LendingPoolConfigurator *LendingPoolConfiguratorCallerSession) CONFIGURATORREVISION() (*big.Int, error) {
	return _LendingPoolConfigurator.Contract.CONFIGURATORREVISION(&_LendingPoolConfigurator.CallOpts)
}

// PoolAddressesProvider is a free data retrieval call binding the contract method 0x80e17d87.
//
// Solidity: function poolAddressesProvider() view returns(address)
func (_LendingPoolConfigurator *LendingPoolConfiguratorCaller) PoolAddressesProvider(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _LendingPoolConfigurator.contract.Call(opts, out, "poolAddressesProvider")
	return *ret0, err
}

// PoolAddressesProvider is a free data retrieval call binding the contract method 0x80e17d87.
//
// Solidity: function poolAddressesProvider() view returns(address)
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) PoolAddressesProvider() (common.Address, error) {
	return _LendingPoolConfigurator.Contract.PoolAddressesProvider(&_LendingPoolConfigurator.CallOpts)
}

// PoolAddressesProvider is a free data retrieval call binding the contract method 0x80e17d87.
//
// Solidity: function poolAddressesProvider() view returns(address)
func (_LendingPoolConfigurator *LendingPoolConfiguratorCallerSession) PoolAddressesProvider() (common.Address, error) {
	return _LendingPoolConfigurator.Contract.PoolAddressesProvider(&_LendingPoolConfigurator.CallOpts)
}

// ActivateReserve is a paid mutator transaction binding the contract method 0xb75d6f34.
//
// Solidity: function activateReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) ActivateReserve(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "activateReserve", _reserve)
}

// ActivateReserve is a paid mutator transaction binding the contract method 0xb75d6f34.
//
// Solidity: function activateReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) ActivateReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.ActivateReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// ActivateReserve is a paid mutator transaction binding the contract method 0xb75d6f34.
//
// Solidity: function activateReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) ActivateReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.ActivateReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DeactivateReserve is a paid mutator transaction binding the contract method 0x3e72a454.
//
// Solidity: function deactivateReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DeactivateReserve(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "deactivateReserve", _reserve)
}

// DeactivateReserve is a paid mutator transaction binding the contract method 0x3e72a454.
//
// Solidity: function deactivateReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DeactivateReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DeactivateReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DeactivateReserve is a paid mutator transaction binding the contract method 0x3e72a454.
//
// Solidity: function deactivateReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DeactivateReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DeactivateReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DisableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xa8dc0f45.
//
// Solidity: function disableBorrowingOnReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DisableBorrowingOnReserve(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "disableBorrowingOnReserve", _reserve)
}

// DisableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xa8dc0f45.
//
// Solidity: function disableBorrowingOnReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DisableBorrowingOnReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DisableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xa8dc0f45.
//
// Solidity: function disableBorrowingOnReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DisableBorrowingOnReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DisableReserveAsCollateral is a paid mutator transaction binding the contract method 0xe8ae2f5b.
//
// Solidity: function disableReserveAsCollateral(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DisableReserveAsCollateral(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "disableReserveAsCollateral", _reserve)
}

// DisableReserveAsCollateral is a paid mutator transaction binding the contract method 0xe8ae2f5b.
//
// Solidity: function disableReserveAsCollateral(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DisableReserveAsCollateral(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableReserveAsCollateral(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DisableReserveAsCollateral is a paid mutator transaction binding the contract method 0xe8ae2f5b.
//
// Solidity: function disableReserveAsCollateral(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DisableReserveAsCollateral(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableReserveAsCollateral(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DisableReserveStableBorrowRate is a paid mutator transaction binding the contract method 0xb8c0f745.
//
// Solidity: function disableReserveStableBorrowRate(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) DisableReserveStableBorrowRate(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "disableReserveStableBorrowRate", _reserve)
}

// DisableReserveStableBorrowRate is a paid mutator transaction binding the contract method 0xb8c0f745.
//
// Solidity: function disableReserveStableBorrowRate(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) DisableReserveStableBorrowRate(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableReserveStableBorrowRate(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// DisableReserveStableBorrowRate is a paid mutator transaction binding the contract method 0xb8c0f745.
//
// Solidity: function disableReserveStableBorrowRate(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) DisableReserveStableBorrowRate(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.DisableReserveStableBorrowRate(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// EnableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xeede87c1.
//
// Solidity: function enableBorrowingOnReserve(address _reserve, bool _stableBorrowRateEnabled) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) EnableBorrowingOnReserve(opts *bind.TransactOpts, _reserve common.Address, _stableBorrowRateEnabled bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "enableBorrowingOnReserve", _reserve, _stableBorrowRateEnabled)
}

// EnableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xeede87c1.
//
// Solidity: function enableBorrowingOnReserve(address _reserve, bool _stableBorrowRateEnabled) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) EnableBorrowingOnReserve(_reserve common.Address, _stableBorrowRateEnabled bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, _reserve, _stableBorrowRateEnabled)
}

// EnableBorrowingOnReserve is a paid mutator transaction binding the contract method 0xeede87c1.
//
// Solidity: function enableBorrowingOnReserve(address _reserve, bool _stableBorrowRateEnabled) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) EnableBorrowingOnReserve(_reserve common.Address, _stableBorrowRateEnabled bool) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableBorrowingOnReserve(&_LendingPoolConfigurator.TransactOpts, _reserve, _stableBorrowRateEnabled)
}

// EnableReserveAsCollateral is a paid mutator transaction binding the contract method 0xa5bc826c.
//
// Solidity: function enableReserveAsCollateral(address _reserve, uint256 _baseLTVasCollateral, uint256 _liquidationThreshold, uint256 _liquidationBonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) EnableReserveAsCollateral(opts *bind.TransactOpts, _reserve common.Address, _baseLTVasCollateral *big.Int, _liquidationThreshold *big.Int, _liquidationBonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "enableReserveAsCollateral", _reserve, _baseLTVasCollateral, _liquidationThreshold, _liquidationBonus)
}

// EnableReserveAsCollateral is a paid mutator transaction binding the contract method 0xa5bc826c.
//
// Solidity: function enableReserveAsCollateral(address _reserve, uint256 _baseLTVasCollateral, uint256 _liquidationThreshold, uint256 _liquidationBonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) EnableReserveAsCollateral(_reserve common.Address, _baseLTVasCollateral *big.Int, _liquidationThreshold *big.Int, _liquidationBonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableReserveAsCollateral(&_LendingPoolConfigurator.TransactOpts, _reserve, _baseLTVasCollateral, _liquidationThreshold, _liquidationBonus)
}

// EnableReserveAsCollateral is a paid mutator transaction binding the contract method 0xa5bc826c.
//
// Solidity: function enableReserveAsCollateral(address _reserve, uint256 _baseLTVasCollateral, uint256 _liquidationThreshold, uint256 _liquidationBonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) EnableReserveAsCollateral(_reserve common.Address, _baseLTVasCollateral *big.Int, _liquidationThreshold *big.Int, _liquidationBonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableReserveAsCollateral(&_LendingPoolConfigurator.TransactOpts, _reserve, _baseLTVasCollateral, _liquidationThreshold, _liquidationBonus)
}

// EnableReserveStableBorrowRate is a paid mutator transaction binding the contract method 0xdae4c4e7.
//
// Solidity: function enableReserveStableBorrowRate(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) EnableReserveStableBorrowRate(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "enableReserveStableBorrowRate", _reserve)
}

// EnableReserveStableBorrowRate is a paid mutator transaction binding the contract method 0xdae4c4e7.
//
// Solidity: function enableReserveStableBorrowRate(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) EnableReserveStableBorrowRate(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableReserveStableBorrowRate(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// EnableReserveStableBorrowRate is a paid mutator transaction binding the contract method 0xdae4c4e7.
//
// Solidity: function enableReserveStableBorrowRate(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) EnableReserveStableBorrowRate(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.EnableReserveStableBorrowRate(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// FreezeReserve is a paid mutator transaction binding the contract method 0x7aca76eb.
//
// Solidity: function freezeReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) FreezeReserve(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "freezeReserve", _reserve)
}

// FreezeReserve is a paid mutator transaction binding the contract method 0x7aca76eb.
//
// Solidity: function freezeReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) FreezeReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.FreezeReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// FreezeReserve is a paid mutator transaction binding the contract method 0x7aca76eb.
//
// Solidity: function freezeReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) FreezeReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.FreezeReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// InitReserve is a paid mutator transaction binding the contract method 0x071033e4.
//
// Solidity: function initReserve(address _reserve, uint8 _underlyingAssetDecimals, address _interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) InitReserve(opts *bind.TransactOpts, _reserve common.Address, _underlyingAssetDecimals uint8, _interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "initReserve", _reserve, _underlyingAssetDecimals, _interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x071033e4.
//
// Solidity: function initReserve(address _reserve, uint8 _underlyingAssetDecimals, address _interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) InitReserve(_reserve common.Address, _underlyingAssetDecimals uint8, _interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.InitReserve(&_LendingPoolConfigurator.TransactOpts, _reserve, _underlyingAssetDecimals, _interestRateStrategyAddress)
}

// InitReserve is a paid mutator transaction binding the contract method 0x071033e4.
//
// Solidity: function initReserve(address _reserve, uint8 _underlyingAssetDecimals, address _interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) InitReserve(_reserve common.Address, _underlyingAssetDecimals uint8, _interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.InitReserve(&_LendingPoolConfigurator.TransactOpts, _reserve, _underlyingAssetDecimals, _interestRateStrategyAddress)
}

// InitReserveWithData is a paid mutator transaction binding the contract method 0x36805a62.
//
// Solidity: function initReserveWithData(address _reserve, string _aTokenName, string _aTokenSymbol, uint8 _underlyingAssetDecimals, address _interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) InitReserveWithData(opts *bind.TransactOpts, _reserve common.Address, _aTokenName string, _aTokenSymbol string, _underlyingAssetDecimals uint8, _interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "initReserveWithData", _reserve, _aTokenName, _aTokenSymbol, _underlyingAssetDecimals, _interestRateStrategyAddress)
}

// InitReserveWithData is a paid mutator transaction binding the contract method 0x36805a62.
//
// Solidity: function initReserveWithData(address _reserve, string _aTokenName, string _aTokenSymbol, uint8 _underlyingAssetDecimals, address _interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) InitReserveWithData(_reserve common.Address, _aTokenName string, _aTokenSymbol string, _underlyingAssetDecimals uint8, _interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.InitReserveWithData(&_LendingPoolConfigurator.TransactOpts, _reserve, _aTokenName, _aTokenSymbol, _underlyingAssetDecimals, _interestRateStrategyAddress)
}

// InitReserveWithData is a paid mutator transaction binding the contract method 0x36805a62.
//
// Solidity: function initReserveWithData(address _reserve, string _aTokenName, string _aTokenSymbol, uint8 _underlyingAssetDecimals, address _interestRateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) InitReserveWithData(_reserve common.Address, _aTokenName string, _aTokenSymbol string, _underlyingAssetDecimals uint8, _interestRateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.InitReserveWithData(&_LendingPoolConfigurator.TransactOpts, _reserve, _aTokenName, _aTokenSymbol, _underlyingAssetDecimals, _interestRateStrategyAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _poolAddressesProvider) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) Initialize(opts *bind.TransactOpts, _poolAddressesProvider common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "initialize", _poolAddressesProvider)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _poolAddressesProvider) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) Initialize(_poolAddressesProvider common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.Initialize(&_LendingPoolConfigurator.TransactOpts, _poolAddressesProvider)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _poolAddressesProvider) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) Initialize(_poolAddressesProvider common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.Initialize(&_LendingPoolConfigurator.TransactOpts, _poolAddressesProvider)
}

// RefreshLendingPoolCoreConfiguration is a paid mutator transaction binding the contract method 0xe12dcc6c.
//
// Solidity: function refreshLendingPoolCoreConfiguration() returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) RefreshLendingPoolCoreConfiguration(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "refreshLendingPoolCoreConfiguration")
}

// RefreshLendingPoolCoreConfiguration is a paid mutator transaction binding the contract method 0xe12dcc6c.
//
// Solidity: function refreshLendingPoolCoreConfiguration() returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) RefreshLendingPoolCoreConfiguration() (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.RefreshLendingPoolCoreConfiguration(&_LendingPoolConfigurator.TransactOpts)
}

// RefreshLendingPoolCoreConfiguration is a paid mutator transaction binding the contract method 0xe12dcc6c.
//
// Solidity: function refreshLendingPoolCoreConfiguration() returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) RefreshLendingPoolCoreConfiguration() (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.RefreshLendingPoolCoreConfiguration(&_LendingPoolConfigurator.TransactOpts)
}

// RemoveLastAddedReserve is a paid mutator transaction binding the contract method 0xd06e2ec1.
//
// Solidity: function removeLastAddedReserve(address _reserveToRemove) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) RemoveLastAddedReserve(opts *bind.TransactOpts, _reserveToRemove common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "removeLastAddedReserve", _reserveToRemove)
}

// RemoveLastAddedReserve is a paid mutator transaction binding the contract method 0xd06e2ec1.
//
// Solidity: function removeLastAddedReserve(address _reserveToRemove) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) RemoveLastAddedReserve(_reserveToRemove common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.RemoveLastAddedReserve(&_LendingPoolConfigurator.TransactOpts, _reserveToRemove)
}

// RemoveLastAddedReserve is a paid mutator transaction binding the contract method 0xd06e2ec1.
//
// Solidity: function removeLastAddedReserve(address _reserveToRemove) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) RemoveLastAddedReserve(_reserveToRemove common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.RemoveLastAddedReserve(&_LendingPoolConfigurator.TransactOpts, _reserveToRemove)
}

// SetReserveBaseLTVasCollateral is a paid mutator transaction binding the contract method 0xd466016f.
//
// Solidity: function setReserveBaseLTVasCollateral(address _reserve, uint256 _ltv) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveBaseLTVasCollateral(opts *bind.TransactOpts, _reserve common.Address, _ltv *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveBaseLTVasCollateral", _reserve, _ltv)
}

// SetReserveBaseLTVasCollateral is a paid mutator transaction binding the contract method 0xd466016f.
//
// Solidity: function setReserveBaseLTVasCollateral(address _reserve, uint256 _ltv) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveBaseLTVasCollateral(_reserve common.Address, _ltv *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveBaseLTVasCollateral(&_LendingPoolConfigurator.TransactOpts, _reserve, _ltv)
}

// SetReserveBaseLTVasCollateral is a paid mutator transaction binding the contract method 0xd466016f.
//
// Solidity: function setReserveBaseLTVasCollateral(address _reserve, uint256 _ltv) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveBaseLTVasCollateral(_reserve common.Address, _ltv *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveBaseLTVasCollateral(&_LendingPoolConfigurator.TransactOpts, _reserve, _ltv)
}

// SetReserveDecimals is a paid mutator transaction binding the contract method 0x66bbd928.
//
// Solidity: function setReserveDecimals(address _reserve, uint256 _decimals) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveDecimals(opts *bind.TransactOpts, _reserve common.Address, _decimals *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveDecimals", _reserve, _decimals)
}

// SetReserveDecimals is a paid mutator transaction binding the contract method 0x66bbd928.
//
// Solidity: function setReserveDecimals(address _reserve, uint256 _decimals) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveDecimals(_reserve common.Address, _decimals *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveDecimals(&_LendingPoolConfigurator.TransactOpts, _reserve, _decimals)
}

// SetReserveDecimals is a paid mutator transaction binding the contract method 0x66bbd928.
//
// Solidity: function setReserveDecimals(address _reserve, uint256 _decimals) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveDecimals(_reserve common.Address, _decimals *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveDecimals(&_LendingPoolConfigurator.TransactOpts, _reserve, _decimals)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address _reserve, address _rateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveInterestRateStrategyAddress(opts *bind.TransactOpts, _reserve common.Address, _rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveInterestRateStrategyAddress", _reserve, _rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address _reserve, address _rateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveInterestRateStrategyAddress(_reserve common.Address, _rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveInterestRateStrategyAddress(&_LendingPoolConfigurator.TransactOpts, _reserve, _rateStrategyAddress)
}

// SetReserveInterestRateStrategyAddress is a paid mutator transaction binding the contract method 0x1d2118f9.
//
// Solidity: function setReserveInterestRateStrategyAddress(address _reserve, address _rateStrategyAddress) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveInterestRateStrategyAddress(_reserve common.Address, _rateStrategyAddress common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveInterestRateStrategyAddress(&_LendingPoolConfigurator.TransactOpts, _reserve, _rateStrategyAddress)
}

// SetReserveLiquidationBonus is a paid mutator transaction binding the contract method 0x70fb84f4.
//
// Solidity: function setReserveLiquidationBonus(address _reserve, uint256 _bonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveLiquidationBonus(opts *bind.TransactOpts, _reserve common.Address, _bonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveLiquidationBonus", _reserve, _bonus)
}

// SetReserveLiquidationBonus is a paid mutator transaction binding the contract method 0x70fb84f4.
//
// Solidity: function setReserveLiquidationBonus(address _reserve, uint256 _bonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveLiquidationBonus(_reserve common.Address, _bonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveLiquidationBonus(&_LendingPoolConfigurator.TransactOpts, _reserve, _bonus)
}

// SetReserveLiquidationBonus is a paid mutator transaction binding the contract method 0x70fb84f4.
//
// Solidity: function setReserveLiquidationBonus(address _reserve, uint256 _bonus) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveLiquidationBonus(_reserve common.Address, _bonus *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveLiquidationBonus(&_LendingPoolConfigurator.TransactOpts, _reserve, _bonus)
}

// SetReserveLiquidationThreshold is a paid mutator transaction binding the contract method 0x3443a14b.
//
// Solidity: function setReserveLiquidationThreshold(address _reserve, uint256 _threshold) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) SetReserveLiquidationThreshold(opts *bind.TransactOpts, _reserve common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "setReserveLiquidationThreshold", _reserve, _threshold)
}

// SetReserveLiquidationThreshold is a paid mutator transaction binding the contract method 0x3443a14b.
//
// Solidity: function setReserveLiquidationThreshold(address _reserve, uint256 _threshold) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) SetReserveLiquidationThreshold(_reserve common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveLiquidationThreshold(&_LendingPoolConfigurator.TransactOpts, _reserve, _threshold)
}

// SetReserveLiquidationThreshold is a paid mutator transaction binding the contract method 0x3443a14b.
//
// Solidity: function setReserveLiquidationThreshold(address _reserve, uint256 _threshold) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) SetReserveLiquidationThreshold(_reserve common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.SetReserveLiquidationThreshold(&_LendingPoolConfigurator.TransactOpts, _reserve, _threshold)
}

// UnfreezeReserve is a paid mutator transaction binding the contract method 0xef1f9373.
//
// Solidity: function unfreezeReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactor) UnfreezeReserve(opts *bind.TransactOpts, _reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.contract.Transact(opts, "unfreezeReserve", _reserve)
}

// UnfreezeReserve is a paid mutator transaction binding the contract method 0xef1f9373.
//
// Solidity: function unfreezeReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorSession) UnfreezeReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UnfreezeReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// UnfreezeReserve is a paid mutator transaction binding the contract method 0xef1f9373.
//
// Solidity: function unfreezeReserve(address _reserve) returns()
func (_LendingPoolConfigurator *LendingPoolConfiguratorTransactorSession) UnfreezeReserve(_reserve common.Address) (*types.Transaction, error) {
	return _LendingPoolConfigurator.Contract.UnfreezeReserve(&_LendingPoolConfigurator.TransactOpts, _reserve)
}

// LendingPoolConfiguratorBorrowingDisabledOnReserveIterator is returned from FilterBorrowingDisabledOnReserve and is used to iterate over the raw logs and unpacked data for BorrowingDisabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingDisabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorBorrowingDisabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorBorrowingDisabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorBorrowingDisabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorBorrowingDisabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorBorrowingDisabledOnReserve represents a BorrowingDisabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingDisabledOnReserve struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBorrowingDisabledOnReserve is a free log retrieval operation binding the contract event 0xe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e.
//
// Solidity: event BorrowingDisabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterBorrowingDisabledOnReserve(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorBorrowingDisabledOnReserveIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "BorrowingDisabledOnReserve", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorBorrowingDisabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "BorrowingDisabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchBorrowingDisabledOnReserve is a free log subscription operation binding the contract event 0xe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e.
//
// Solidity: event BorrowingDisabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchBorrowingDisabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorBorrowingDisabledOnReserve, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "BorrowingDisabledOnReserve", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingDisabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowingDisabledOnReserve is a log parse operation binding the contract event 0xe9a7e5fd4fc8ea18e602350324bf48e8f05d12434af0ce0be05743e6a5fdcb9e.
//
// Solidity: event BorrowingDisabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseBorrowingDisabledOnReserve(log types.Log) (*LendingPoolConfiguratorBorrowingDisabledOnReserve, error) {
	event := new(LendingPoolConfiguratorBorrowingDisabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingDisabledOnReserve", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorBorrowingEnabledOnReserveIterator is returned from FilterBorrowingEnabledOnReserve and is used to iterate over the raw logs and unpacked data for BorrowingEnabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingEnabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorBorrowingEnabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorBorrowingEnabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorBorrowingEnabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorBorrowingEnabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorBorrowingEnabledOnReserve represents a BorrowingEnabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorBorrowingEnabledOnReserve struct {
	Reserve           common.Address
	StableRateEnabled bool
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterBorrowingEnabledOnReserve is a free log retrieval operation binding the contract event 0xab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b508.
//
// Solidity: event BorrowingEnabledOnReserve(address _reserve, bool _stableRateEnabled)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterBorrowingEnabledOnReserve(opts *bind.FilterOpts) (*LendingPoolConfiguratorBorrowingEnabledOnReserveIterator, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "BorrowingEnabledOnReserve")
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorBorrowingEnabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "BorrowingEnabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchBorrowingEnabledOnReserve is a free log subscription operation binding the contract event 0xab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b508.
//
// Solidity: event BorrowingEnabledOnReserve(address _reserve, bool _stableRateEnabled)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchBorrowingEnabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorBorrowingEnabledOnReserve) (event.Subscription, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "BorrowingEnabledOnReserve")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingEnabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBorrowingEnabledOnReserve is a log parse operation binding the contract event 0xab2f7f9e5ca2772fafa94f355c1842a80ae6b9e41f83083098d81f67d7a0b508.
//
// Solidity: event BorrowingEnabledOnReserve(address _reserve, bool _stableRateEnabled)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseBorrowingEnabledOnReserve(log types.Log) (*LendingPoolConfiguratorBorrowingEnabledOnReserve, error) {
	event := new(LendingPoolConfiguratorBorrowingEnabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "BorrowingEnabledOnReserve", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveActivatedIterator is returned from FilterReserveActivated and is used to iterate over the raw logs and unpacked data for ReserveActivated events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveActivatedIterator struct {
	Event *LendingPoolConfiguratorReserveActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveActivated represents a ReserveActivated event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveActivated struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveActivated is a free log retrieval operation binding the contract event 0x35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c.
//
// Solidity: event ReserveActivated(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveActivated(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveActivatedIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveActivated", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveActivatedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveActivated", logs: logs, sub: sub}, nil
}

// WatchReserveActivated is a free log subscription operation binding the contract event 0x35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c.
//
// Solidity: event ReserveActivated(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveActivated(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveActivated, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveActivated", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveActivated)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveActivated is a log parse operation binding the contract event 0x35b80cd8ea3440e9a8454f116fa658b858da1b64c86c48451f4559cefcdfb56c.
//
// Solidity: event ReserveActivated(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveActivated(log types.Log) (*LendingPoolConfiguratorReserveActivated, error) {
	event := new(LendingPoolConfiguratorReserveActivated)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveBaseLtvChangedIterator is returned from FilterReserveBaseLtvChanged and is used to iterate over the raw logs and unpacked data for ReserveBaseLtvChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveBaseLtvChangedIterator struct {
	Event *LendingPoolConfiguratorReserveBaseLtvChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveBaseLtvChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveBaseLtvChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveBaseLtvChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveBaseLtvChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveBaseLtvChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveBaseLtvChanged represents a ReserveBaseLtvChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveBaseLtvChanged struct {
	Reserve common.Address
	Ltv     *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveBaseLtvChanged is a free log retrieval operation binding the contract event 0xda47540c7f7fd5a68c3285f3bb708f322424f948f41df6f51622fa24b3968664.
//
// Solidity: event ReserveBaseLtvChanged(address _reserve, uint256 _ltv)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveBaseLtvChanged(opts *bind.FilterOpts) (*LendingPoolConfiguratorReserveBaseLtvChangedIterator, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveBaseLtvChanged")
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveBaseLtvChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveBaseLtvChanged", logs: logs, sub: sub}, nil
}

// WatchReserveBaseLtvChanged is a free log subscription operation binding the contract event 0xda47540c7f7fd5a68c3285f3bb708f322424f948f41df6f51622fa24b3968664.
//
// Solidity: event ReserveBaseLtvChanged(address _reserve, uint256 _ltv)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveBaseLtvChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveBaseLtvChanged) (event.Subscription, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveBaseLtvChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveBaseLtvChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveBaseLtvChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveBaseLtvChanged is a log parse operation binding the contract event 0xda47540c7f7fd5a68c3285f3bb708f322424f948f41df6f51622fa24b3968664.
//
// Solidity: event ReserveBaseLtvChanged(address _reserve, uint256 _ltv)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveBaseLtvChanged(log types.Log) (*LendingPoolConfiguratorReserveBaseLtvChanged, error) {
	event := new(LendingPoolConfiguratorReserveBaseLtvChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveBaseLtvChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveDeactivatedIterator is returned from FilterReserveDeactivated and is used to iterate over the raw logs and unpacked data for ReserveDeactivated events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDeactivatedIterator struct {
	Event *LendingPoolConfiguratorReserveDeactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveDeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveDeactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveDeactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveDeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveDeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveDeactivated represents a ReserveDeactivated event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDeactivated struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveDeactivated is a free log retrieval operation binding the contract event 0x6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e.
//
// Solidity: event ReserveDeactivated(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveDeactivated(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveDeactivatedIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveDeactivated", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveDeactivatedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveDeactivated", logs: logs, sub: sub}, nil
}

// WatchReserveDeactivated is a free log subscription operation binding the contract event 0x6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e.
//
// Solidity: event ReserveDeactivated(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveDeactivated(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveDeactivated, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveDeactivated", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveDeactivated)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDeactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDeactivated is a log parse operation binding the contract event 0x6f60cf8bd0f218cabe1ea3150bd07b0b758c35c4cfdf7138017a283e65564d5e.
//
// Solidity: event ReserveDeactivated(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveDeactivated(log types.Log) (*LendingPoolConfiguratorReserveDeactivated, error) {
	event := new(LendingPoolConfiguratorReserveDeactivated)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDeactivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveDecimalsChangedIterator is returned from FilterReserveDecimalsChanged and is used to iterate over the raw logs and unpacked data for ReserveDecimalsChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDecimalsChangedIterator struct {
	Event *LendingPoolConfiguratorReserveDecimalsChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveDecimalsChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveDecimalsChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveDecimalsChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveDecimalsChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveDecimalsChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveDecimalsChanged represents a ReserveDecimalsChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDecimalsChanged struct {
	Reserve  common.Address
	Decimals *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterReserveDecimalsChanged is a free log retrieval operation binding the contract event 0x2e73b7f1df792712003e6859f940c1e8711c3f1329474771fee71d2ec1163129.
//
// Solidity: event ReserveDecimalsChanged(address _reserve, uint256 _decimals)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveDecimalsChanged(opts *bind.FilterOpts) (*LendingPoolConfiguratorReserveDecimalsChangedIterator, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveDecimalsChanged")
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveDecimalsChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveDecimalsChanged", logs: logs, sub: sub}, nil
}

// WatchReserveDecimalsChanged is a free log subscription operation binding the contract event 0x2e73b7f1df792712003e6859f940c1e8711c3f1329474771fee71d2ec1163129.
//
// Solidity: event ReserveDecimalsChanged(address _reserve, uint256 _decimals)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveDecimalsChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveDecimalsChanged) (event.Subscription, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveDecimalsChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveDecimalsChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDecimalsChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDecimalsChanged is a log parse operation binding the contract event 0x2e73b7f1df792712003e6859f940c1e8711c3f1329474771fee71d2ec1163129.
//
// Solidity: event ReserveDecimalsChanged(address _reserve, uint256 _decimals)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveDecimalsChanged(log types.Log) (*LendingPoolConfiguratorReserveDecimalsChanged, error) {
	event := new(LendingPoolConfiguratorReserveDecimalsChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDecimalsChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveDisabledAsCollateralIterator is returned from FilterReserveDisabledAsCollateral and is used to iterate over the raw logs and unpacked data for ReserveDisabledAsCollateral events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDisabledAsCollateralIterator struct {
	Event *LendingPoolConfiguratorReserveDisabledAsCollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveDisabledAsCollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveDisabledAsCollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveDisabledAsCollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveDisabledAsCollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveDisabledAsCollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveDisabledAsCollateral represents a ReserveDisabledAsCollateral event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveDisabledAsCollateral struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveDisabledAsCollateral is a free log retrieval operation binding the contract event 0x9cc75e4cafc9a556a369bc53468649075680eb554d225d5918f199453824796d.
//
// Solidity: event ReserveDisabledAsCollateral(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveDisabledAsCollateral(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveDisabledAsCollateralIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveDisabledAsCollateral", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveDisabledAsCollateralIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveDisabledAsCollateral", logs: logs, sub: sub}, nil
}

// WatchReserveDisabledAsCollateral is a free log subscription operation binding the contract event 0x9cc75e4cafc9a556a369bc53468649075680eb554d225d5918f199453824796d.
//
// Solidity: event ReserveDisabledAsCollateral(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveDisabledAsCollateral(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveDisabledAsCollateral, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveDisabledAsCollateral", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveDisabledAsCollateral)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDisabledAsCollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveDisabledAsCollateral is a log parse operation binding the contract event 0x9cc75e4cafc9a556a369bc53468649075680eb554d225d5918f199453824796d.
//
// Solidity: event ReserveDisabledAsCollateral(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveDisabledAsCollateral(log types.Log) (*LendingPoolConfiguratorReserveDisabledAsCollateral, error) {
	event := new(LendingPoolConfiguratorReserveDisabledAsCollateral)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveDisabledAsCollateral", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveEnabledAsCollateralIterator is returned from FilterReserveEnabledAsCollateral and is used to iterate over the raw logs and unpacked data for ReserveEnabledAsCollateral events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveEnabledAsCollateralIterator struct {
	Event *LendingPoolConfiguratorReserveEnabledAsCollateral // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveEnabledAsCollateralIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveEnabledAsCollateral)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveEnabledAsCollateral)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveEnabledAsCollateralIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveEnabledAsCollateralIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveEnabledAsCollateral represents a ReserveEnabledAsCollateral event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveEnabledAsCollateral struct {
	Reserve              common.Address
	Ltv                  *big.Int
	LiquidationThreshold *big.Int
	LiquidationBonus     *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterReserveEnabledAsCollateral is a free log retrieval operation binding the contract event 0xdfe62f53e7707d64f99bca15d2bdf3facc4074bc047e7dec2ea130300e992744.
//
// Solidity: event ReserveEnabledAsCollateral(address indexed _reserve, uint256 _ltv, uint256 _liquidationThreshold, uint256 _liquidationBonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveEnabledAsCollateral(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveEnabledAsCollateralIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveEnabledAsCollateral", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveEnabledAsCollateralIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveEnabledAsCollateral", logs: logs, sub: sub}, nil
}

// WatchReserveEnabledAsCollateral is a free log subscription operation binding the contract event 0xdfe62f53e7707d64f99bca15d2bdf3facc4074bc047e7dec2ea130300e992744.
//
// Solidity: event ReserveEnabledAsCollateral(address indexed _reserve, uint256 _ltv, uint256 _liquidationThreshold, uint256 _liquidationBonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveEnabledAsCollateral(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveEnabledAsCollateral, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveEnabledAsCollateral", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveEnabledAsCollateral)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveEnabledAsCollateral", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveEnabledAsCollateral is a log parse operation binding the contract event 0xdfe62f53e7707d64f99bca15d2bdf3facc4074bc047e7dec2ea130300e992744.
//
// Solidity: event ReserveEnabledAsCollateral(address indexed _reserve, uint256 _ltv, uint256 _liquidationThreshold, uint256 _liquidationBonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveEnabledAsCollateral(log types.Log) (*LendingPoolConfiguratorReserveEnabledAsCollateral, error) {
	event := new(LendingPoolConfiguratorReserveEnabledAsCollateral)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveEnabledAsCollateral", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveFreezedIterator is returned from FilterReserveFreezed and is used to iterate over the raw logs and unpacked data for ReserveFreezed events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveFreezedIterator struct {
	Event *LendingPoolConfiguratorReserveFreezed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveFreezedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveFreezed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveFreezed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveFreezedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveFreezedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveFreezed represents a ReserveFreezed event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveFreezed struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveFreezed is a free log retrieval operation binding the contract event 0xda5cdb66c77023db6abe5226a4d4a40c3b8e768012f4ff4e446f62f60127fc56.
//
// Solidity: event ReserveFreezed(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveFreezed(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveFreezedIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveFreezed", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveFreezedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveFreezed", logs: logs, sub: sub}, nil
}

// WatchReserveFreezed is a free log subscription operation binding the contract event 0xda5cdb66c77023db6abe5226a4d4a40c3b8e768012f4ff4e446f62f60127fc56.
//
// Solidity: event ReserveFreezed(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveFreezed(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveFreezed, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveFreezed", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveFreezed)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveFreezed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveFreezed is a log parse operation binding the contract event 0xda5cdb66c77023db6abe5226a4d4a40c3b8e768012f4ff4e446f62f60127fc56.
//
// Solidity: event ReserveFreezed(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveFreezed(log types.Log) (*LendingPoolConfiguratorReserveFreezed, error) {
	event := new(LendingPoolConfiguratorReserveFreezed)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveFreezed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveInitializedIterator is returned from FilterReserveInitialized and is used to iterate over the raw logs and unpacked data for ReserveInitialized events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInitializedIterator struct {
	Event *LendingPoolConfiguratorReserveInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveInitialized represents a ReserveInitialized event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInitialized struct {
	Reserve                     common.Address
	AToken                      common.Address
	InterestRateStrategyAddress common.Address
	Raw                         types.Log // Blockchain specific contextual infos
}

// FilterReserveInitialized is a free log retrieval operation binding the contract event 0x1d9fcd0dc935b4778d5af97f55c4d7b2553257382f1ef25c412114c8eeebd88e.
//
// Solidity: event ReserveInitialized(address indexed _reserve, address indexed _aToken, address _interestRateStrategyAddress)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveInitialized(opts *bind.FilterOpts, _reserve []common.Address, _aToken []common.Address) (*LendingPoolConfiguratorReserveInitializedIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}
	var _aTokenRule []interface{}
	for _, _aTokenItem := range _aToken {
		_aTokenRule = append(_aTokenRule, _aTokenItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveInitialized", _reserveRule, _aTokenRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveInitializedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveInitialized", logs: logs, sub: sub}, nil
}

// WatchReserveInitialized is a free log subscription operation binding the contract event 0x1d9fcd0dc935b4778d5af97f55c4d7b2553257382f1ef25c412114c8eeebd88e.
//
// Solidity: event ReserveInitialized(address indexed _reserve, address indexed _aToken, address _interestRateStrategyAddress)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveInitialized(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveInitialized, _reserve []common.Address, _aToken []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}
	var _aTokenRule []interface{}
	for _, _aTokenItem := range _aToken {
		_aTokenRule = append(_aTokenRule, _aTokenItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveInitialized", _reserveRule, _aTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveInitialized)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInitialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveInitialized is a log parse operation binding the contract event 0x1d9fcd0dc935b4778d5af97f55c4d7b2553257382f1ef25c412114c8eeebd88e.
//
// Solidity: event ReserveInitialized(address indexed _reserve, address indexed _aToken, address _interestRateStrategyAddress)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveInitialized(log types.Log) (*LendingPoolConfiguratorReserveInitialized, error) {
	event := new(LendingPoolConfiguratorReserveInitialized)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInitialized", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator is returned from FilterReserveInterestRateStrategyChanged and is used to iterate over the raw logs and unpacked data for ReserveInterestRateStrategyChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator struct {
	Event *LendingPoolConfiguratorReserveInterestRateStrategyChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveInterestRateStrategyChanged represents a ReserveInterestRateStrategyChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveInterestRateStrategyChanged struct {
	Reserve  common.Address
	Strategy common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterReserveInterestRateStrategyChanged is a free log retrieval operation binding the contract event 0x5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5.
//
// Solidity: event ReserveInterestRateStrategyChanged(address _reserve, address _strategy)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveInterestRateStrategyChanged(opts *bind.FilterOpts) (*LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveInterestRateStrategyChanged")
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveInterestRateStrategyChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveInterestRateStrategyChanged", logs: logs, sub: sub}, nil
}

// WatchReserveInterestRateStrategyChanged is a free log subscription operation binding the contract event 0x5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5.
//
// Solidity: event ReserveInterestRateStrategyChanged(address _reserve, address _strategy)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveInterestRateStrategyChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveInterestRateStrategyChanged) (event.Subscription, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveInterestRateStrategyChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInterestRateStrategyChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveInterestRateStrategyChanged is a log parse operation binding the contract event 0x5644b64ebb0ce18c4032248ca52f58355469092ff072866c3dcd8640e817d6a5.
//
// Solidity: event ReserveInterestRateStrategyChanged(address _reserve, address _strategy)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveInterestRateStrategyChanged(log types.Log) (*LendingPoolConfiguratorReserveInterestRateStrategyChanged, error) {
	event := new(LendingPoolConfiguratorReserveInterestRateStrategyChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveInterestRateStrategyChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveLiquidationBonusChangedIterator is returned from FilterReserveLiquidationBonusChanged and is used to iterate over the raw logs and unpacked data for ReserveLiquidationBonusChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveLiquidationBonusChangedIterator struct {
	Event *LendingPoolConfiguratorReserveLiquidationBonusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveLiquidationBonusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveLiquidationBonusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveLiquidationBonusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveLiquidationBonusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveLiquidationBonusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveLiquidationBonusChanged represents a ReserveLiquidationBonusChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveLiquidationBonusChanged struct {
	Reserve common.Address
	Bonus   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveLiquidationBonusChanged is a free log retrieval operation binding the contract event 0xe3ba662f7011e701056a43e8cf832242322eeff01453e7a72d01ec2af36d9aec.
//
// Solidity: event ReserveLiquidationBonusChanged(address _reserve, uint256 _bonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveLiquidationBonusChanged(opts *bind.FilterOpts) (*LendingPoolConfiguratorReserveLiquidationBonusChangedIterator, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveLiquidationBonusChanged")
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveLiquidationBonusChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveLiquidationBonusChanged", logs: logs, sub: sub}, nil
}

// WatchReserveLiquidationBonusChanged is a free log subscription operation binding the contract event 0xe3ba662f7011e701056a43e8cf832242322eeff01453e7a72d01ec2af36d9aec.
//
// Solidity: event ReserveLiquidationBonusChanged(address _reserve, uint256 _bonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveLiquidationBonusChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveLiquidationBonusChanged) (event.Subscription, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveLiquidationBonusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveLiquidationBonusChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveLiquidationBonusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveLiquidationBonusChanged is a log parse operation binding the contract event 0xe3ba662f7011e701056a43e8cf832242322eeff01453e7a72d01ec2af36d9aec.
//
// Solidity: event ReserveLiquidationBonusChanged(address _reserve, uint256 _bonus)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveLiquidationBonusChanged(log types.Log) (*LendingPoolConfiguratorReserveLiquidationBonusChanged, error) {
	event := new(LendingPoolConfiguratorReserveLiquidationBonusChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveLiquidationBonusChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator is returned from FilterReserveLiquidationThresholdChanged and is used to iterate over the raw logs and unpacked data for ReserveLiquidationThresholdChanged events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator struct {
	Event *LendingPoolConfiguratorReserveLiquidationThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveLiquidationThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveLiquidationThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveLiquidationThresholdChanged represents a ReserveLiquidationThresholdChanged event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveLiquidationThresholdChanged struct {
	Reserve   common.Address
	Threshold *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterReserveLiquidationThresholdChanged is a free log retrieval operation binding the contract event 0x437dd3b61b7c7eee7fc70515c8846482dfca92e2e1e02af5d638c5d4878d6714.
//
// Solidity: event ReserveLiquidationThresholdChanged(address _reserve, uint256 _threshold)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveLiquidationThresholdChanged(opts *bind.FilterOpts) (*LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveLiquidationThresholdChanged")
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveLiquidationThresholdChangedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveLiquidationThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchReserveLiquidationThresholdChanged is a free log subscription operation binding the contract event 0x437dd3b61b7c7eee7fc70515c8846482dfca92e2e1e02af5d638c5d4878d6714.
//
// Solidity: event ReserveLiquidationThresholdChanged(address _reserve, uint256 _threshold)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveLiquidationThresholdChanged(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveLiquidationThresholdChanged) (event.Subscription, error) {

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveLiquidationThresholdChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveLiquidationThresholdChanged)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveLiquidationThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveLiquidationThresholdChanged is a log parse operation binding the contract event 0x437dd3b61b7c7eee7fc70515c8846482dfca92e2e1e02af5d638c5d4878d6714.
//
// Solidity: event ReserveLiquidationThresholdChanged(address _reserve, uint256 _threshold)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveLiquidationThresholdChanged(log types.Log) (*LendingPoolConfiguratorReserveLiquidationThresholdChanged, error) {
	event := new(LendingPoolConfiguratorReserveLiquidationThresholdChanged)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveLiquidationThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveRemovedIterator is returned from FilterReserveRemoved and is used to iterate over the raw logs and unpacked data for ReserveRemoved events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveRemovedIterator struct {
	Event *LendingPoolConfiguratorReserveRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveRemoved represents a ReserveRemoved event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveRemoved struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveRemoved is a free log retrieval operation binding the contract event 0x19dbf059e4d3a0cb998d4328b7b991bbe312827eeb053d8ff63edf33158e01db.
//
// Solidity: event ReserveRemoved(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveRemoved(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveRemovedIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveRemoved", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveRemovedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveRemoved", logs: logs, sub: sub}, nil
}

// WatchReserveRemoved is a free log subscription operation binding the contract event 0x19dbf059e4d3a0cb998d4328b7b991bbe312827eeb053d8ff63edf33158e01db.
//
// Solidity: event ReserveRemoved(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveRemoved(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveRemoved, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveRemoved", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveRemoved)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveRemoved is a log parse operation binding the contract event 0x19dbf059e4d3a0cb998d4328b7b991bbe312827eeb053d8ff63edf33158e01db.
//
// Solidity: event ReserveRemoved(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveRemoved(log types.Log) (*LendingPoolConfiguratorReserveRemoved, error) {
	event := new(LendingPoolConfiguratorReserveRemoved)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorReserveUnfreezedIterator is returned from FilterReserveUnfreezed and is used to iterate over the raw logs and unpacked data for ReserveUnfreezed events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveUnfreezedIterator struct {
	Event *LendingPoolConfiguratorReserveUnfreezed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorReserveUnfreezedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorReserveUnfreezed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorReserveUnfreezed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorReserveUnfreezedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorReserveUnfreezedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorReserveUnfreezed represents a ReserveUnfreezed event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorReserveUnfreezed struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterReserveUnfreezed is a free log retrieval operation binding the contract event 0x995959c2ceab6ce20e8cd89c904e449fd3e21918a0f420c9ec9340595585526b.
//
// Solidity: event ReserveUnfreezed(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterReserveUnfreezed(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorReserveUnfreezedIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "ReserveUnfreezed", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorReserveUnfreezedIterator{contract: _LendingPoolConfigurator.contract, event: "ReserveUnfreezed", logs: logs, sub: sub}, nil
}

// WatchReserveUnfreezed is a free log subscription operation binding the contract event 0x995959c2ceab6ce20e8cd89c904e449fd3e21918a0f420c9ec9340595585526b.
//
// Solidity: event ReserveUnfreezed(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchReserveUnfreezed(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorReserveUnfreezed, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "ReserveUnfreezed", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorReserveUnfreezed)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveUnfreezed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReserveUnfreezed is a log parse operation binding the contract event 0x995959c2ceab6ce20e8cd89c904e449fd3e21918a0f420c9ec9340595585526b.
//
// Solidity: event ReserveUnfreezed(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseReserveUnfreezed(log types.Log) (*LendingPoolConfiguratorReserveUnfreezed, error) {
	event := new(LendingPoolConfiguratorReserveUnfreezed)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "ReserveUnfreezed", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorStableRateDisabledOnReserveIterator is returned from FilterStableRateDisabledOnReserve and is used to iterate over the raw logs and unpacked data for StableRateDisabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateDisabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorStableRateDisabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorStableRateDisabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorStableRateDisabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorStableRateDisabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorStableRateDisabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorStableRateDisabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorStableRateDisabledOnReserve represents a StableRateDisabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateDisabledOnReserve struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStableRateDisabledOnReserve is a free log retrieval operation binding the contract event 0x8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e3.
//
// Solidity: event StableRateDisabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterStableRateDisabledOnReserve(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorStableRateDisabledOnReserveIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "StableRateDisabledOnReserve", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorStableRateDisabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "StableRateDisabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchStableRateDisabledOnReserve is a free log subscription operation binding the contract event 0x8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e3.
//
// Solidity: event StableRateDisabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchStableRateDisabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorStableRateDisabledOnReserve, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "StableRateDisabledOnReserve", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorStableRateDisabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateDisabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStableRateDisabledOnReserve is a log parse operation binding the contract event 0x8bbf35441ac2c607ddecadd3d8ee58636d32f217fad201fb2655581502dd84e3.
//
// Solidity: event StableRateDisabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseStableRateDisabledOnReserve(log types.Log) (*LendingPoolConfiguratorStableRateDisabledOnReserve, error) {
	event := new(LendingPoolConfiguratorStableRateDisabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateDisabledOnReserve", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LendingPoolConfiguratorStableRateEnabledOnReserveIterator is returned from FilterStableRateEnabledOnReserve and is used to iterate over the raw logs and unpacked data for StableRateEnabledOnReserve events raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateEnabledOnReserveIterator struct {
	Event *LendingPoolConfiguratorStableRateEnabledOnReserve // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LendingPoolConfiguratorStableRateEnabledOnReserveIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LendingPoolConfiguratorStableRateEnabledOnReserve)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LendingPoolConfiguratorStableRateEnabledOnReserve)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LendingPoolConfiguratorStableRateEnabledOnReserveIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LendingPoolConfiguratorStableRateEnabledOnReserveIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LendingPoolConfiguratorStableRateEnabledOnReserve represents a StableRateEnabledOnReserve event raised by the LendingPoolConfigurator contract.
type LendingPoolConfiguratorStableRateEnabledOnReserve struct {
	Reserve common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStableRateEnabledOnReserve is a free log retrieval operation binding the contract event 0x8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb1.
//
// Solidity: event StableRateEnabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) FilterStableRateEnabledOnReserve(opts *bind.FilterOpts, _reserve []common.Address) (*LendingPoolConfiguratorStableRateEnabledOnReserveIterator, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.FilterLogs(opts, "StableRateEnabledOnReserve", _reserveRule)
	if err != nil {
		return nil, err
	}
	return &LendingPoolConfiguratorStableRateEnabledOnReserveIterator{contract: _LendingPoolConfigurator.contract, event: "StableRateEnabledOnReserve", logs: logs, sub: sub}, nil
}

// WatchStableRateEnabledOnReserve is a free log subscription operation binding the contract event 0x8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb1.
//
// Solidity: event StableRateEnabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) WatchStableRateEnabledOnReserve(opts *bind.WatchOpts, sink chan<- *LendingPoolConfiguratorStableRateEnabledOnReserve, _reserve []common.Address) (event.Subscription, error) {

	var _reserveRule []interface{}
	for _, _reserveItem := range _reserve {
		_reserveRule = append(_reserveRule, _reserveItem)
	}

	logs, sub, err := _LendingPoolConfigurator.contract.WatchLogs(opts, "StableRateEnabledOnReserve", _reserveRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LendingPoolConfiguratorStableRateEnabledOnReserve)
				if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateEnabledOnReserve", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStableRateEnabledOnReserve is a log parse operation binding the contract event 0x8dee2b2f3e98319ae6347eda521788f73f4086c9be9a594942b370b137fb8cb1.
//
// Solidity: event StableRateEnabledOnReserve(address indexed _reserve)
func (_LendingPoolConfigurator *LendingPoolConfiguratorFilterer) ParseStableRateEnabledOnReserve(log types.Log) (*LendingPoolConfiguratorStableRateEnabledOnReserve, error) {
	event := new(LendingPoolConfiguratorStableRateEnabledOnReserve)
	if err := _LendingPoolConfigurator.contract.UnpackLog(event, "StableRateEnabledOnReserve", log); err != nil {
		return nil, err
	}
	return event, nil
}
